{"version":3,"sources":["js/module_11/timer.js"],"names":["refs","startBtn","document","querySelector","stopBtn","clockface","Timer","constructor","onTick","intervalId","isActive","init","time","getTimeComponents","start","startTime","Date","now","setInterval","currentTime","deltaTime","stop","clearInterval","hours","pad","Math","floor","mins","secs","value","String","padStart","timer","updateClockFace","textContent","console","log","addEventListener","bind"],"mappings":";;;AA2EC,aA3ED,QAAA,wBAEA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,eAGpC,MAAMG,EACJC,aAAY,OAAEC,IACPC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXF,KAAAA,OAASA,EAETG,KAAAA,OAGPA,OACQC,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BL,KAAAA,OAAOI,GAGdE,QACM,GAAA,KAAKJ,SACP,OAEIK,MAAAA,EAAYC,KAAKC,MAClBP,KAAAA,UAAW,EACXD,KAAAA,WAAaS,YAAY,KACtBC,MACAC,EADcJ,KAAKC,MACOF,EAC1BH,EAAO,KAAKC,kBAAkBO,GAC/BZ,KAAAA,OAAOI,IACX,KAGLS,OACEC,cAAc,KAAKb,YACdC,KAAAA,UAAW,EACVE,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BL,KAAAA,OAAOI,GAOdC,kBAAkBD,GAKT,MAAA,CAAEW,MAJK,KAAKC,IAAIC,KAAKC,MAAOd,EAAQ,MAAyB,OAIpDe,KAHH,KAAKH,IAAIC,KAAKC,MAAOd,EAAQ,KAAoB,MAGxCgB,KAFT,KAAKJ,IAAIC,KAAKC,MAAOd,EAAQ,IAAc,OAW1DY,IAAIK,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAQ,IAAI1B,EAAM,CAAEE,OAAQyB,IAMlC,SAASA,GAAgB,MAAEV,EAAF,KAASI,EAAT,KAAeC,IACtC5B,EAAKK,UAAU6B,eAAiBX,KAASI,KAAQC,IACjDO,QAAQC,OAAOb,KAASI,KAAQC,KANlC5B,EAAKC,SAASoC,iBAAiB,QAASL,EAAMlB,MAAMwB,KAAKN,IAEzDhC,EAAKI,QAAQiC,iBAAiB,QAASL,EAAMX,KAAKiB,KAAKN","file":"timer.59f5e4be.js","sourceRoot":"../src","sourcesContent":["import '../../sass/main.scss';\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.clockface'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n\n    this.init();\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.getTimeComponents(deltaTime);\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n  /*\n   * Принимает время в милисекундах\n   * Высчитывает сколько в них вмещается часов/минут/секунд\n   * Возвращает объект со свойствами hours, mins, secs\n   */\n  getTimeComponents(time) {\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n  }\n\n  /*\n   * Принимает число\n   * Привод к строке\n   * Добавляет в начало ноль если число меньше двух символов\n   */\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({ onTick: updateClockFace });\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\n\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\nfunction updateClockFace({ hours, mins, secs }) {\n  refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n  console.log(`${hours}:${mins}:${secs}`);\n}\n"]}