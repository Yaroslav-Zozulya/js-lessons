{"version":3,"sources":["js/module_11/promise.js"],"names":["promise","Promise","resolve","reject","canFulfill","Math","random","setTimeout","then","result","console","log","error","x","y","catch","finally","makeOrder","dish","passed","onMakeOrderSuccess","onMakeOrderError","fetchPokemonById","id","fetch","r","json","onFetchSuccess","pokemon","forms","onFetchError"],"mappings":";AAEA,MAAMA,EAAU,IAAIC,QAAQ,CAACC,EAASC,KAC9BC,MAAAA,EAAaC,KAAKC,SAAW,GAEnCC,WAAW,KACLH,GACFF,EAAQ,2BAGVC,EAAO,2BACN,OAGLH,EAAQQ,KACNC,IACEC,QAAQC,IAAIF,IAEdG,IACEF,QAAQC,IAAIC,KAIhBF,QAAQC,IAAIX,GAQZA,EACGQ,KAAKC,IACJC,QAAQC,IAAIF,GACL,IAGRD,KAAKK,IACJH,QAAQC,IAAIE,GACL,KAGRL,KAAKM,IACJJ,QAAQC,IAAIG,KAEbC,MAAMH,IACLF,QAAQC,IAAIC,KAEbI,QAAQ,KACPN,QAAQC,IAAI,oCAOhB,MAAMM,EAAYC,IAET,OAAA,IAAIjB,QAAQ,CAACC,EAASC,KACrBgB,MAAAA,EAASd,KAAKC,SAAW,GAE/BC,WAAW,KACLY,GACFjB,EAAQ,mBAEVC,EAAO,mCARG,QAehB,SAASiB,EAAmBX,GAC1BC,QAAQC,IAAIS,GACZV,QAAQC,IAAIF,GAGd,SAASY,EAAiBT,GACxBF,QAAQC,IAAIU,GACZX,QAAQC,IAAIC,GArBL,IAAIX,QAAQ,CAACC,EAASC,KACrBgB,MAAAA,EAASd,KAAKC,SAAW,GAE/BC,WAAW,KACLY,GACFjB,EAAQ,mBAEVC,EAAO,mCARG,OAaKK,KAAKY,GAAoBL,MAAMM,GAgBpD,MAAMC,EAAmBC,GAEhBC,2CAA2CD,KAAMf,KAAKiB,GAAKA,EAAEC,QAGtE,SAASC,EAAeC,GACtBlB,QAAQC,IAAIiB,EAAQC,MAAM,IAG5B,SAASC,EAAalB,GACpBF,QAAQC,IAAIC,GAGdU,EAAiB,GAAGd,KAAKmB,GAAgBZ,MAAMe,GAC/CR,EAAiB,GAAGd,KAAKmB,GAAgBZ,MAAMe,GAC/CR,EAAiB,GAAGd,KAAKmB,GAAgBZ,MAAMe","file":"promise.68357c56.js","sourceRoot":"../src","sourcesContent":["/* Promise синтаксис */\n\nconst promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n\n  setTimeout(() => {\n    if (canFulfill) {\n      resolve('Промис выполнен успешно');\n    }\n\n    reject('Ошибка выполнения кода');\n  }, 2000);\n});\n\npromise.then(\n  result => {\n    console.log(result);\n  },\n  error => {\n    console.log(error);\n  },\n);\n\nconsole.log(promise);\n\n/*\n * Цепочки промисов (chaining)\n * Promise.prototype.catch(error)\n * Promise.prototype.finally()\n */\n\npromise\n  .then(result => {\n    console.log(result);\n    return 5;\n  })\n\n  .then(x => {\n    console.log(x);\n    return 10;\n  })\n\n  .then(y => {\n    console.log(y);\n  })\n  .catch(error => {\n    console.log(error);\n  })\n  .finally(() => {\n    console.log('Я буду выполнен в любом случае');\n  });\n\n/*\n * Промисификация \"Синхронных\" функций\n */\n\nconst makeOrder = dish => {\n  const DELAY = 1000;\n  return new Promise((resolve, reject) => {\n    const passed = Math.random() > 0.5;\n\n    setTimeout(() => {\n      if (passed) {\n        resolve('Вот ваше блюдо.');\n      }\n      reject('Извините, закончились продукты');\n    }, DELAY);\n  });\n};\n\nmakeOrder('Пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\nfunction onMakeOrderSuccess(result) {\n  console.log(onMakeOrderSuccess);\n  console.log(result);\n}\n\nfunction onMakeOrderError(error) {\n  console.log(onMakeOrderError);\n  console.log(error);\n}\n\n/*\n * FetchAPI\n */\n\nconst fetchPokemonById = id => {\n  //обратить внимание\n  return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json());\n};\n\nfunction onFetchSuccess(pokemon) {\n  console.log(pokemon.forms[0]);\n}\n\nfunction onFetchError(error) {\n  console.log(error);\n}\n\nfetchPokemonById(1).then(onFetchSuccess).catch(onFetchError);\nfetchPokemonById(2).then(onFetchSuccess).catch(onFetchError);\nfetchPokemonById(3).then(onFetchSuccess).catch(onFetchError);\n"]}