{"version":3,"sources":["js/module_11/timer.js"],"names":["refs","startBtn","document","querySelector","stopBtn","clockface","Timer","constructor","onTick","intervalId","isActive","start","startTime","Date","now","setInterval","currentTime","time","getTimeComponents","stop","clearInterval","timer","updateClockFace","hours","mins","secs","textContent","pad","Math","floor","value","String","padStart","addEventListener"],"mappings":";;;AAqEC,aArED,QAAA,wBAEA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,eAGpC,MAAMG,EACJC,aAAY,OAAEC,IACPC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXF,KAAAA,OAASA,EAEhBG,QACM,GAAA,KAAKD,SACP,OAEIE,MAAAA,EAAYC,KAAKC,MAClBJ,KAAAA,UAAW,EACXD,KAAAA,WAAaM,YAAY,KACtBC,MAEAC,EAAOC,EAFOL,KAAKC,MACOF,GAE3BJ,KAAAA,OAAOS,IACX,KAGLE,OACEC,cAAc,KAAKX,YACdC,KAAAA,UAAW,GAIpB,MAAMW,EAAQ,IAAIf,EAAM,CAAEE,OAAQc,IAUlC,SAASA,GAAgB,MAAEC,EAAF,KAASC,EAAT,KAAeC,IACtCzB,EAAKK,UAAUqB,eAAiBH,KAASC,KAAQC,IAQnD,SAASP,EAAkBD,GAKlB,MAAA,CAAEM,MAJKI,EAAIC,KAAKC,MAAOZ,EAAQ,MAAyB,OAI/CO,KAHHG,EAAIC,KAAKC,MAAOZ,EAAQ,KAAoB,MAGnCQ,KAFTE,EAAIC,KAAKC,MAAOZ,EAAQ,IAAc,OAWrD,SAASU,EAAIG,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAhCnChC,EAAKC,SAASgC,iBAAiB,QAAS,KACtCZ,EAAMV,UAGRX,EAAKI,QAAQ6B,iBAAiB,QAAS,KACrCZ,EAAMF","file":"timer.0046e7f9.js","sourceRoot":"../src","sourcesContent":["import '../../sass/main.scss';\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.clockface'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n  }\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = getTimeComponents(deltaTime);\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n  }\n}\n\nconst timer = new Timer({ onTick: updateClockFace });\n\nrefs.startBtn.addEventListener('click', () => {\n  timer.start();\n});\n\nrefs.stopBtn.addEventListener('click', () => {\n  timer.stop();\n});\n\nfunction updateClockFace({ hours, mins, secs }) {\n  refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n\n/*\n * Принимает время в милисекундах\n * Высчитывает сколько в них вмещается часов/минут/секунд\n * Возвращает объект со свойствами hours, mins, secs\n */\nfunction getTimeComponents(time) {\n  const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n  return { hours, mins, secs };\n}\n\n/*\n * Принимает число\n * Привод к строке\n * Добавляет в начало ноль если число меньше двух символов\n */\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n"]}