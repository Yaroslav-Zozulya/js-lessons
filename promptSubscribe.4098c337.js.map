{"version":3,"sources":["../node_modules/bootstrap.native/dist/bootstrap-native.esm.js","js/module_11/promptSubscribe.js"],"names":["EventRegistry","globalListener","e","that","type","forEach","elementsMap","element","listenersMap","listenerMap","listener","options","apply","once","removeListener","addListener","eventType","Map","oneEventMap","has","set","oneElementMap","get","size","addEventListener","savedOptions","eventOptions","undefined","delete","removeEventListener","EventListener","on","off","registry","mouseclickEvent","transitionEndEvent","transitionDelay","transitionProperty","getElementStyle","property","computedStyle","getComputedStyle","getElementTransitionDelay","propertyValue","delayValue","delayScale","includes","duration","parseFloat","Number","isNaN","transitionDuration","getElementTransitionDuration","durationValue","durationScale","emulateTransitionEnd","handler","called","endEvent","Event","delay","transitionEndWrapper","target","setTimeout","dispatchEvent","getDocument","node","HTMLElement","ownerDocument","Window","document","window","parentNodes","Document","Element","elementNodes","querySelector","selector","parent","lookUp","some","x","closest","getRootNode","host","ObjectAssign","obj","source","Object","assign","hasClass","classNAME","classList","contains","removeClass","remove","event","componentData","Data","component","instance","getAllFor","instanceMap","allForC","getInstance","OriginalEvent","EventType","config","OriginalCustomEvent","CustomEvent","cancelable","bubbles","fadeClass","showClass","dataBsDismiss","alertString","alertComponent","getAttribute","attribute","normalizeValue","value","ObjectKeys","keys","toLowerCase","normalizeOptions","defaultOps","inputOps","ns","data","dataset","normalOps","dataOps","k","key","replace","match","version","Version","BaseComponent","constructor","self","Error","name","prevInstance","dispose","defaults","length","prop","alertSelector","alertDismissSelector","getAlertInstance","alertInitCallback","Alert","closeAlertEvent","closedAlertEvent","alertTransitionEnd","toggleAlertHandler","add","action","dismiss","close","defaultPrevented","init","ariaPressed","setAttribute","addClass","activeClass","dataBsToggle","buttonString","buttonComponent","buttonSelector","getButtonInstance","buttonInitCallback","Button","toggleButtonHandler","toggle","isActive","preventDefault","mouseenterEvent","mouseleaveEvent","keydownEvent","touchmoveEvent","touchendEvent","touchstartEvent","keyArrowLeft","keyArrowRight","getWindow","defaultView","getBoundingClientRect","includeScale","width","height","top","right","bottom","left","scaleX","scaleY","offsetWidth","offsetHeight","Math","round","y","getDocumentElement","documentElement","isElementInScrollRange","clientHeight","isRTL","dir","querySelectorAll","getElementsByClassName","TimeCache","Timer","callback","keyTimers","clear","clearTimeout","reflow","passiveHandler","passive","dataBsTarget","carouselString","carouselComponent","dataBsParent","dataBsContainer","getTargetElement","targetAttr","doc","map","att","attValue","filter","carouselSelector","carouselItem","dataBsSlideTo","dataBsSlide","pausedClass","carouselDefaults","pause","keyboard","touch","interval","getCarouselInstance","carouselInitCallback","Carousel","startX","currentX","endX","carouselSlideEvent","carouselSlidEvent","carouselTransitionEndHandler","index","direction","slides","isAnimating","activeItem","getActiveIndex","orientation","directionClass","hidden","isPaused","cycle","carouselPauseHandler","carouselResumeHandler","carouselIndicatorHandler","indicator","newIndex","to","carouselControlsHandler","control","next","prev","carouselKeyHandler","code","RTL","arrowKeyNext","carouselTouchDownHandler","isTouch","changedTouches","pageX","toggleCarouselTouchHandlers","carouselTouchMoveHandler","carouselTouchEndHandler","relatedTarget","abs","activateCarouselIndicator","pageIndex","indicators","toggleCarouselHandlers","controls","arrow","indexOf","id","idx","eventProperties","from","itemClasses","slide","c","ariaExpanded","collapsingClass","collapseString","collapseComponent","collapseSelector","collapseToggleSelector","collapseDefaults","getCollapseInstance","collapseInitCallback","Collapse","showCollapseEvent","shownCollapseEvent","hideCollapseEvent","hiddenCollapseEvent","expandCollapse","triggers","style","scrollHeight","btn","collapseContent","toggleCollapseHandler","collapseClickHandler","trigger","tagName","hide","show","activeCollapse","activeCollapseInstance","find","i","focusEvent","keyupEvent","scrollEvent","resizeEvent","keyArrowUp","keyArrowDown","keyEscape","hasAttribute","setElementStyle","styles","focus","dropdownMenuClasses","dropdownComponent","dropdownMenuClass","isEmptyAnchor","parentAnchor","href","slice","dropdownString","dropupString","dropstartString","dropendString","dropdownSelector","getDropdownInstance","dropdownInitCallback","Dropdown","dropdownMenuEndClass","verticalClass","horizontalClass","menuFocusTags","dropdownDefaults","offset","display","showDropdownEvent","shownDropdownEvent","hideDropdownEvent","hiddenDropdownEvent","styleDropdown","menu","parentElement","menuEnd","p","positionClass","dropdownMargin","dropdown","dropup","dropstart","dropend","dropdownPosition","menuWidth","menuHeight","clientWidth","targetLeft","targetTop","targetWidth","targetHeight","leftFullExceed","rightFullExceed","bottomExceed","bottomFullExceed","topExceed","leftExceed","rightExceed","margin","join","getMenuItems","children","firstElementChild","toggleDropdownDismiss","open","dropdownDismissHandler","dropdownPreventScroll","dropdownKeyHandler","ev","dropdownLayoutHandler","toggleDropdownHandler","dropdownClickHandler","getCurrentOpenDropdown","currentParent","hasData","isForm","activeElement","menuItems","currentElement","currentInstance","ariaHidden","ariaModal","removeAttribute","getDocumentBody","body","modalString","modalComponent","isShadowRoot","ShadowRoot","getParentNode","nodeName","assignedSlot","parentNode","isTableElement","isHTMLElement","getElementContainer","getOffset","majorBlockTags","offsetParent","win","containers","shadowRoot","push","every","r","fixedTopClass","fixedBottomClass","stickyTopClass","positionStickyClass","getFixedItems","resetScrollbar","bd","paddingRight","overflow","fixedItems","fixed","marginRight","measureScrollbar","innerWidth","setScrollbar","bodyPad","parseInt","sbWidth","itemPadValue","itemMValue","createElement","param","attr","newElement","offcanvasString","backdropString","modalBackdropClass","offcanvasBackdropClass","modalActiveSelector","offcanvasActiveSelector","overlay","getCurrentOpen","toggleOverlayType","isModal","targetClass","appendOverlay","container","hasFade","append","showOverlay","hideOverlay","removeOverlay","isVisible","modalSelector","modalToggleSelector","modalDismissSelector","modalStaticClass","modalDefaults","backdrop","getModalInstance","modalInitCallback","Modal","showModalEvent","shownModalEvent","hideModalEvent","hiddenModalEvent","setModalScrollbar","scrollbarWidth","modalHeight","modalScrollHeight","modalOverflow","pad","toggleModalDismiss","modalDismissHandler","update","modalKeyHandler","toggleModalHandler","modalClickHandler","afterModalHide","focusElement","afterModalShow","beforeModalShow","beforeModalHide","force","isStatic","modalDialog","selectedText","getSelection","toString","targetInsideDialog","staticTransitionEnd","bind","overlayDelay","currentOpen","offcanvasComponent","offcanvasSelector","offcanvasToggleSelector","offcanvasDismissSelector","offcanvasTogglingClass","offcanvasDefaults","scroll","getOffcanvasInstance","offcanvasInitCallback","Offcanvas","showOffcanvasEvent","shownOffcanvasEvent","hideOffcanvasEvent","hiddenOffcanvasEvent","setOffCanvasScrollbar","toggleOffcanvasEvents","offcanvasTriggerHandler","toggleOffCanvasDismiss","offcanvasKeyDismissHandler","offcanvasDismissHandler","beforeOffcanvasShow","visibility","showOffcanvasComplete","beforeOffcanvasHide","blur","hideOffcanvasComplete","offCanvasDismiss","selection","visibleTrigger","popoverString","popoverComponent","tooltipString","getTipTemplate","tipType","isTooltip","isMedia","SVGElement","HTMLImageElement","HTMLVideoElement","mediaType","getNodeScroll","isWin","scrollX","scrollLeft","scrollY","scrollTop","isScaledElement","getRectRelativeToOffsetParent","isParentAnElement","rect","offsets","offsetRect","clientLeft","clientTop","tipClassPositions","styleTip","tipClasses","tooltip","tipPositions","isPopover","tipWidth","tipHeight","windowWidth","windowHeight","placement","parentLeft","parentRight","parentTop","parentWidth","parentPosition","fixedParent","staticParent","isSticky","leftBoundry","rightBoundry","elemWidth","elemHeight","elemRectLeft","elemRectRight","elemRectTop","topPosition","leftPosition","rightPosition","arrowTop","arrowLeft","arrowRight","arrowWidth","arrowHeight","arrowAdjust","horizontal","vertical","className","eX","eY","pageY","clientX","clientY","tooltipDefaults","template","title","customClass","sanitizeFn","animation","ariaDescribedBy","mousedownEvent","mousemoveEvent","focusinEvent","focusoutEvent","mousehoverEvent","elementUID","elementMapUID","elementIDMap","getUID","result","elID","elMap","elkey","userAgentData","uaDATA","navigator","userAgent","userAgentString","appleBrands","isApple","brands","test","brand","dataOriginalTitle","tooltipComponent","setHtml","content","dirty","trim","domParser","tempDocument","DOMParser","parseFromString","method","createTip","dismissible","tipString","btnClose","placementClass","popoverTemplate","htmlMarkup","cloneNode","bodyClass","tooltipHeader","tooltipBody","isVisibleTip","tip","tooltipSelector","titleAttr","getTooltipInstance","tooltipInitCallback","Tooltip","removeTooltip","disposeTooltipComplete","toggleTooltipHandlers","toggleTooltipTitle","toggleTooltipAction","handleTouch","tooltipShownAction","shownTooltipEvent","tooltipHiddenAction","hiddenTooltipEvent","enabled","triggerOptions","split","elemIsMedia","tr","toggleTooltipOpenHandlers","parentModal","parentOffcanvas","scrollTarget","titleAtt","tipComponent","elem","idealContainer","outTimer","showTooltipEvent","hideTooltipEvent","enable","disable","toggleEnabled","popoverSelector","popoverDefaults","Popover","getPopoverInstance","popoverInitCallback","getElementsByTagName","scrollspyString","scrollspyComponent","scrollspySelector","scrollspyDefaults","getScrollSpyInstance","scrollspyInitCallback","ScrollSpy","activateScrollSpy","updateSpyTargets","itemsLength","links","scrollHEIGHT","getScrollHeight","targetItem","items","maxScroll","getOffsetHeight","link","charAt","offsetTop","innerHeight","item","activate","parents","parentItem","menuItem","parentLink","previousElementSibling","toggleSpyHandlers","refresh","newActiveItem","ariaSelected","tabString","tabComponent","tabSelector","getTabInstance","tabInitCallback","Tab","showTabEvent","shownTabEvent","hideTabEvent","hiddenTabEvent","tabPrivate","triggerTabEnd","tabContent","nav","triggerTabShow","nextContent","tab","currentHeight","nextHeight","triggerTabHide","getActiveTab","activeTabs","getParentDropdown","toggleTabHandler","tabClickHandler","firstTab","firstTabContent","activeDropdown","toastString","toastComponent","toastSelector","toastDismissSelector","showingClass","hideClass","toastDefaults","autohide","getToastInstance","toastInitCallback","Toast","showToastEvent","shownToastEvent","hideToastEvent","hiddenToastEvent","showToastComplete","hideToastComplete","hideToast","showToast","toggleToastHandlers","interactiveToastHandler","completeDisposeToast","matches","componentsList","initComponentDataAPI","collection","removeComponentDataAPI","context","compData","initCallback","elemCollection","comp","removeDataAPI","BSN","refs","modal","subscribeBtn","PROMPT_DELAY","MAX_PROMPT_ATTEMPTS","promptCounter","hasSubscribed","openModal","onSubscribeBtnClick"],"mappings":"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","file":"promptSubscribe.4098c337.js","sourceRoot":"../src","sourcesContent":["/*!\n  * Native JavaScript for Bootstrap v4.1.2 (https://thednp.github.io/bootstrap.native/)\n  * Copyright 2015-2022 © dnp_theme\n  * Licensed under MIT (https://github.com/thednp/bootstrap.native/blob/master/LICENSE)\n  */\n/** @type {Record<string, any>} */\nconst EventRegistry = {};\n\n/**\n * The global event listener.\n *\n * @this {Element | HTMLElement | Window | Document}\n * @param {Event} e\n * @returns {void}\n */\nfunction globalListener(e) {\n  const that = this;\n  const { type } = e;\n  const oneEvMap = EventRegistry[type] ? [...EventRegistry[type]] : [];\n\n  oneEvMap.forEach((elementsMap) => {\n    const [element, listenersMap] = elementsMap;\n    [...listenersMap].forEach((listenerMap) => {\n      if (element === that) {\n        const [listener, options] = listenerMap;\n        listener.apply(element, [e]);\n\n        if (options && options.once) {\n          removeListener(element, type, listener, options);\n        }\n      }\n    });\n  });\n}\n\n/**\n * Register a new listener with its options and attach the `globalListener`\n * to the target if this is the first listener.\n *\n * @param {Element | HTMLElement | Window | Document} element\n * @param {string} eventType\n * @param {EventListenerObject['handleEvent']} listener\n * @param {AddEventListenerOptions=} options\n */\nconst addListener = (element, eventType, listener, options) => {\n  // get element listeners first\n  if (!EventRegistry[eventType]) {\n    EventRegistry[eventType] = new Map();\n  }\n  const oneEventMap = EventRegistry[eventType];\n\n  if (!oneEventMap.has(element)) {\n    oneEventMap.set(element, new Map());\n  }\n  const oneElementMap = oneEventMap.get(element);\n\n  // get listeners size\n  const { size } = oneElementMap;\n\n  // register listener with its options\n  if (oneElementMap) {\n    oneElementMap.set(listener, options);\n  }\n\n  // add listener last\n  if (!size) {\n    element.addEventListener(eventType, globalListener, options);\n  }\n};\n\n/**\n * Remove a listener from registry and detach the `globalListener`\n * if no listeners are found in the registry.\n *\n * @param {Element | HTMLElement | Window | Document} element\n * @param {string} eventType\n * @param {EventListenerObject['handleEvent']} listener\n * @param {AddEventListenerOptions=} options\n */\nconst removeListener = (element, eventType, listener, options) => {\n  // get listener first\n  const oneEventMap = EventRegistry[eventType];\n  const oneElementMap = oneEventMap && oneEventMap.get(element);\n  const savedOptions = oneElementMap && oneElementMap.get(listener);\n\n  // also recover initial options\n  const { options: eventOptions } = savedOptions !== undefined\n    ? savedOptions\n    : { options };\n\n  // unsubscribe second, remove from registry\n  if (oneElementMap && oneElementMap.has(listener)) oneElementMap.delete(listener);\n  if (oneEventMap && (!oneElementMap || !oneElementMap.size)) oneEventMap.delete(element);\n  if (!oneEventMap || !oneEventMap.size) delete EventRegistry[eventType];\n\n  // remove listener last\n  if (!oneElementMap || !oneElementMap.size) {\n    element.removeEventListener(eventType, globalListener, eventOptions);\n  }\n};\n\n/**\n * Advanced event listener based on subscribe / publish pattern.\n * @see https://www.patterns.dev/posts/classic-design-patterns/#observerpatternjavascript\n * @see https://gist.github.com/shystruk/d16c0ee7ac7d194da9644e5d740c8338#file-subpub-js\n * @see https://hackernoon.com/do-you-still-register-window-event-listeners-in-each-component-react-in-example-31a4b1f6f1c8\n */\nconst EventListener = {\n  on: addListener,\n  off: removeListener,\n  globalListener,\n  registry: EventRegistry,\n};\n\n/**\n * A global namespace for `click` event.\n * @type {string}\n */\nconst mouseclickEvent = 'click';\n\n/**\n * A global namespace for 'transitionend' string.\n * @type {string}\n */\nconst transitionEndEvent = 'transitionend';\n\n/**\n * A global namespace for 'transitionDelay' string.\n * @type {string}\n */\nconst transitionDelay = 'transitionDelay';\n\n/**\n * A global namespace for `transitionProperty` string for modern browsers.\n *\n * @type {string}\n */\nconst transitionProperty = 'transitionProperty';\n\n/**\n * Shortcut for `window.getComputedStyle(element).propertyName`\n * static method.\n *\n * * If `element` parameter is not an `HTMLElement`, `getComputedStyle`\n * throws a `ReferenceError`.\n *\n * @param {HTMLElement | Element} element target\n * @param {string} property the css property\n * @return {string} the css property value\n */\nfunction getElementStyle(element, property) {\n  const computedStyle = getComputedStyle(element);\n\n  // @ts-ignore -- must use camelcase strings,\n  // or non-camelcase strings with `getPropertyValue`\n  return property in computedStyle ? computedStyle[property] : '';\n}\n\n/**\n * Utility to get the computed `transitionDelay`\n * from Element in miliseconds.\n *\n * @param {HTMLElement | Element} element target\n * @return {number} the value in miliseconds\n */\nfunction getElementTransitionDelay(element) {\n  const propertyValue = getElementStyle(element, transitionProperty);\n  const delayValue = getElementStyle(element, transitionDelay);\n\n  const delayScale = delayValue.includes('ms') ? 1 : 1000;\n  const duration = propertyValue && propertyValue !== 'none'\n    ? parseFloat(delayValue) * delayScale : 0;\n\n  return !Number.isNaN(duration) ? duration : 0;\n}\n\n/**\n * A global namespace for 'transitionDuration' string.\n * @type {string}\n */\nconst transitionDuration = 'transitionDuration';\n\n/**\n * Utility to get the computed `transitionDuration`\n * from Element in miliseconds.\n *\n * @param {HTMLElement | Element} element target\n * @return {number} the value in miliseconds\n */\nfunction getElementTransitionDuration(element) {\n  const propertyValue = getElementStyle(element, transitionProperty);\n  const durationValue = getElementStyle(element, transitionDuration);\n  const durationScale = durationValue.includes('ms') ? 1 : 1000;\n  const duration = propertyValue && propertyValue !== 'none'\n    ? parseFloat(durationValue) * durationScale : 0;\n\n  return !Number.isNaN(duration) ? duration : 0;\n}\n\n/**\n * Utility to make sure callbacks are consistently\n * called when transition ends.\n *\n * @param {HTMLElement | Element} element target\n * @param {EventListener} handler `transitionend` callback\n */\nfunction emulateTransitionEnd(element, handler) {\n  let called = 0;\n  const endEvent = new Event(transitionEndEvent);\n  const duration = getElementTransitionDuration(element);\n  const delay = getElementTransitionDelay(element);\n\n  if (duration) {\n    /**\n     * Wrap the handler in on -> off callback\n     * @type {EventListener} e Event object\n     */\n    const transitionEndWrapper = (e) => {\n      if (e.target === element) {\n        handler.apply(element, [e]);\n        element.removeEventListener(transitionEndEvent, transitionEndWrapper);\n        called = 1;\n      }\n    };\n    element.addEventListener(transitionEndEvent, transitionEndWrapper);\n    setTimeout(() => {\n      if (!called) element.dispatchEvent(endEvent);\n    }, duration + delay + 17);\n  } else {\n    handler.apply(element, [endEvent]);\n  }\n}\n\n/**\n * Returns the `document` or the `#document` element.\n * @see https://github.com/floating-ui/floating-ui\n * @param {(Node | HTMLElement | Element | globalThis)=} node\n * @returns {Document}\n */\nfunction getDocument(node) {\n  if (node instanceof HTMLElement) return node.ownerDocument;\n  if (node instanceof Window) return node.document;\n  return window.document;\n}\n\n/**\n * A global array of possible `ParentNode`.\n */\nconst parentNodes = [Document, Element, HTMLElement];\n\n/**\n * A global array with `Element` | `HTMLElement`.\n */\nconst elementNodes = [Element, HTMLElement];\n\n/**\n * Utility to check if target is typeof `HTMLElement`, `Element`, `Node`\n * or find one that matches a selector.\n *\n * @param {HTMLElement | Element | string} selector the input selector or target element\n * @param {(HTMLElement | Element | Document)=} parent optional node to look into\n * @return {(HTMLElement | Element)?} the `HTMLElement` or `querySelector` result\n */\nfunction querySelector(selector, parent) {\n  const lookUp = parentNodes.some((x) => parent instanceof x)\n    ? parent : getDocument();\n\n  // @ts-ignore\n  return elementNodes.some((x) => selector instanceof x)\n    // @ts-ignore\n    ? selector : lookUp.querySelector(selector);\n}\n\n/**\n * Shortcut for `HTMLElement.closest` method which also works\n * with children of `ShadowRoot`. The order of the parameters\n * is intentional since they're both required.\n *\n * @see https://stackoverflow.com/q/54520554/803358\n *\n * @param {HTMLElement | Element} element Element to look into\n * @param {string} selector the selector name\n * @return {(HTMLElement | Element)?} the query result\n */\nfunction closest(element, selector) {\n  return element ? (element.closest(selector)\n    // @ts-ignore -- break out of `ShadowRoot`\n    || closest(element.getRootNode().host, selector)) : null;\n}\n\n/**\n * Shortcut for `Object.assign()` static method.\n * @param  {Record<string, any>} obj a target object\n * @param  {Record<string, any>} source a source object\n */\nconst ObjectAssign = (obj, source) => Object.assign(obj, source);\n\n/**\n * Check class in `HTMLElement.classList`.\n *\n * @param {HTMLElement | Element} element target\n * @param {string} classNAME to check\n * @returns {boolean}\n */\nfunction hasClass(element, classNAME) {\n  return element.classList.contains(classNAME);\n}\n\n/**\n * Remove class from `HTMLElement.classList`.\n *\n * @param {HTMLElement | Element} element target\n * @param {string} classNAME to remove\n * @returns {void}\n */\nfunction removeClass(element, classNAME) {\n  element.classList.remove(classNAME);\n}\n\n/**\n * Shortcut for the `Element.dispatchEvent(Event)` method.\n *\n * @param {HTMLElement | Element} element is the target\n * @param {Event} event is the `Event` object\n */\nconst dispatchEvent = (element, event) => element.dispatchEvent(event);\n\n/** @type {Map<string, Map<HTMLElement | Element, Record<string, any>>>} */\nconst componentData = new Map();\n/**\n * An interface for web components background data.\n * @see https://github.com/thednp/bootstrap.native/blob/master/src/components/base-component.js\n */\nconst Data = {\n  /**\n   * Sets web components data.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string} component the component's name or a unique key\n   * @param {Record<string, any>} instance the component instance\n   */\n  set: (target, component, instance) => {\n    const element = querySelector(target);\n    if (!element) return;\n\n    if (!componentData.has(component)) {\n      componentData.set(component, new Map());\n    }\n\n    const instanceMap = componentData.get(component);\n    // @ts-ignore - not undefined, but defined right above\n    instanceMap.set(element, instance);\n  },\n\n  /**\n   * Returns all instances for specified component.\n   * @param {string} component the component's name or a unique key\n   * @returns {Map<HTMLElement | Element, Record<string, any>>?} all the component instances\n   */\n  getAllFor: (component) => {\n    const instanceMap = componentData.get(component);\n\n    return instanceMap || null;\n  },\n\n  /**\n   * Returns the instance associated with the target.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string} component the component's name or a unique key\n   * @returns {Record<string, any>?} the instance\n   */\n  get: (target, component) => {\n    const element = querySelector(target);\n    const allForC = Data.getAllFor(component);\n    const instance = element && allForC && allForC.get(element);\n\n    return instance || null;\n  },\n\n  /**\n   * Removes web components data.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string} component the component's name or a unique key\n   */\n  remove: (target, component) => {\n    const element = querySelector(target);\n    const instanceMap = componentData.get(component);\n    if (!instanceMap || !element) return;\n\n    instanceMap.delete(element);\n\n    if (instanceMap.size === 0) {\n      componentData.delete(component);\n    }\n  },\n};\n\n/**\n * An alias for `Data.get()`.\n * @type {SHORTER.getInstance<any>}\n */\nconst getInstance = (target, component) => Data.get(target, component);\n\n/**\n * Returns a namespaced `CustomEvent` specific to each component.\n * @param {string} EventType Event.type\n * @param {Record<string, any>=} config Event.options | Event.properties\n * @returns {SHORTER.OriginalEvent} a new namespaced event\n */\nfunction OriginalEvent(EventType, config) {\n  const OriginalCustomEvent = new CustomEvent(EventType, {\n    cancelable: true, bubbles: true,\n  });\n\n  if (config instanceof Object) {\n    ObjectAssign(OriginalCustomEvent, config);\n  }\n  return OriginalCustomEvent;\n}\n\n/**\n * Global namespace for most components `fade` class.\n */\nconst fadeClass = 'fade';\n\n/**\n * Global namespace for most components `show` class.\n */\nconst showClass = 'show';\n\n/**\n * Global namespace for most components `dismiss` option.\n */\nconst dataBsDismiss = 'data-bs-dismiss';\n\n/** @type {string} */\nconst alertString = 'alert';\n\n/** @type {string} */\nconst alertComponent = 'Alert';\n\n/**\n * Shortcut for `HTMLElement.getAttribute()` method.\n * @param {HTMLElement | Element} element target element\n * @param {string} attribute attribute name\n * @returns {string?} attribute value\n */\nconst getAttribute = (element, attribute) => element.getAttribute(attribute);\n\n/**\n * The raw value or a given component option.\n *\n * @typedef {string | HTMLElement | Function | number | boolean | null} niceValue\n */\n\n/**\n * Utility to normalize component options\n *\n * @param {any} value the input value\n * @return {niceValue} the normalized value\n */\nfunction normalizeValue(value) {\n  if (value === 'true') { // boolean\n    return true;\n  }\n\n  if (value === 'false') { // boolean\n    return false;\n  }\n\n  if (!Number.isNaN(+value)) { // number\n    return +value;\n  }\n\n  if (value === '' || value === 'null') { // null\n    return null;\n  }\n\n  // string / function / HTMLElement / object\n  return value;\n}\n\n/**\n * Shortcut for `Object.keys()` static method.\n * @param  {Record<string, any>} obj a target object\n * @returns {string[]}\n */\nconst ObjectKeys = (obj) => Object.keys(obj);\n\n/**\n * Shortcut for `String.toLowerCase()`.\n *\n * @param {string} source input string\n * @returns {string} lowercase output string\n */\nconst toLowerCase = (source) => source.toLowerCase();\n\n/**\n * Utility to normalize component options.\n *\n * @param {HTMLElement | Element} element target\n * @param {Record<string, any>} defaultOps component default options\n * @param {Record<string, any>} inputOps component instance options\n * @param {string=} ns component namespace\n * @return {Record<string, any>} normalized component options object\n */\nfunction normalizeOptions(element, defaultOps, inputOps, ns) {\n  // @ts-ignore -- our targets are always `HTMLElement`\n  const data = { ...element.dataset };\n  /** @type {Record<string, any>} */\n  const normalOps = {};\n  /** @type {Record<string, any>} */\n  const dataOps = {};\n  const title = 'title';\n\n  ObjectKeys(data).forEach((k) => {\n    const key = ns && k.includes(ns)\n      ? k.replace(ns, '').replace(/[A-Z]/, (match) => toLowerCase(match))\n      : k;\n\n    dataOps[key] = normalizeValue(data[k]);\n  });\n\n  ObjectKeys(inputOps).forEach((k) => {\n    inputOps[k] = normalizeValue(inputOps[k]);\n  });\n\n  ObjectKeys(defaultOps).forEach((k) => {\n    if (k in inputOps) {\n      normalOps[k] = inputOps[k];\n    } else if (k in dataOps) {\n      normalOps[k] = dataOps[k];\n    } else {\n      normalOps[k] = k === title\n        ? getAttribute(element, title)\n        : defaultOps[k];\n    }\n  });\n\n  return normalOps;\n}\n\nvar version = \"4.1.2\";\n\nconst Version = version;\n\n/* Native JavaScript for Bootstrap 5 | Base Component\n----------------------------------------------------- */\n\n/** Returns a new `BaseComponent` instance. */\nclass BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target `Element` or selector string\n   * @param {BSN.ComponentOptions=} config component instance options\n   */\n  constructor(target, config) {\n    const self = this;\n    const element = querySelector(target);\n\n    if (!element) {\n      throw Error(`${self.name} Error: \"${target}\" is not a valid selector.`);\n    }\n\n    /** @static @type {BSN.ComponentOptions} */\n    self.options = {};\n\n    const prevInstance = Data.get(element, self.name);\n    if (prevInstance) prevInstance.dispose();\n\n    /** @type {HTMLElement | Element} */\n    self.element = element;\n\n    if (self.defaults && Object.keys(self.defaults).length) {\n      self.options = normalizeOptions(element, self.defaults, (config || {}), 'bs');\n    }\n\n    Data.set(element, self.name, self);\n  }\n\n  /* eslint-disable */\n  /** @static */\n  get version() { return Version; }\n  /* eslint-enable */\n\n  /** @static */\n  get name() { return this.constructor.name; }\n\n  /** @static */\n  // @ts-ignore\n  get defaults() { return this.constructor.defaults; }\n\n  /**\n   * Removes component from target element;\n   */\n  dispose() {\n    const self = this;\n    Data.remove(self.element, self.name);\n    // @ts-ignore\n    ObjectKeys(self).forEach((prop) => { self[prop] = null; });\n  }\n}\n\n/* Native JavaScript for Bootstrap 5 | Alert\n-------------------------------------------- */\n\n// ALERT PRIVATE GC\n// ================\nconst alertSelector = `.${alertString}`;\nconst alertDismissSelector = `[${dataBsDismiss}=\"${alertString}\"]`;\n\n/**\n * Static method which returns an existing `Alert` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Alert>}\n */\nconst getAlertInstance = (element) => getInstance(element, alertComponent);\n\n/**\n* An `Alert` initialization callback.\n* @type {BSN.InitCallback<Alert>}\n*/\nconst alertInitCallback = (element) => new Alert(element);\n\n// ALERT CUSTOM EVENTS\n// ===================\nconst closeAlertEvent = OriginalEvent(`close.bs.${alertString}`);\nconst closedAlertEvent = OriginalEvent(`closed.bs.${alertString}`);\n\n// ALERT EVENT HANDLER\n// ===================\n/**\n * Alert `transitionend` callback.\n * @param {Alert} self target Alert instance\n */\nfunction alertTransitionEnd(self) {\n  const { element } = self;\n  toggleAlertHandler(self);\n\n  dispatchEvent(element, closedAlertEvent);\n\n  self.dispose();\n  element.remove();\n}\n\n// ALERT PRIVATE METHOD\n// ====================\n/**\n * Toggle on / off the `click` event listener.\n * @param {Alert} self the target alert instance\n * @param {boolean=} add when `true`, event listener is added\n */\nfunction toggleAlertHandler(self, add) {\n  const action = add ? addListener : removeListener;\n  const { dismiss } = self;\n  if (dismiss) action(dismiss, mouseclickEvent, self.close);\n}\n\n// ALERT DEFINITION\n// ================\n/** Creates a new Alert instance. */\nclass Alert extends BaseComponent {\n  /** @param {HTMLElement | Element | string} target element or selector */\n  constructor(target) {\n    super(target);\n    // bind\n    const self = this;\n\n    // initialization element\n    const { element } = self;\n\n    // the dismiss button\n    /** @static @type {(HTMLElement | Element)?} */\n    self.dismiss = querySelector(alertDismissSelector, element);\n\n    // add event listener\n    toggleAlertHandler(self, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return alertComponent; }\n  /* eslint-enable */\n\n  // ALERT PUBLIC METHODS\n  // ====================\n  /**\n   * Public method that hides the `.alert` element from the user,\n   * disposes the instance once animation is complete, then\n   * removes the element from the DOM.\n   *\n   * @param {Event=} e most likely the `click` event\n   * @this {Alert} the `Alert` instance or `EventTarget`\n   */\n  close(e) {\n    // @ts-ignore\n    const self = e ? getAlertInstance(closest(this, alertSelector)) : this;\n    if (!self) return;\n    const { element } = self;\n\n    if (hasClass(element, showClass)) {\n      dispatchEvent(element, closeAlertEvent);\n      if (closeAlertEvent.defaultPrevented) return;\n\n      removeClass(element, showClass);\n\n      if (hasClass(element, fadeClass)) {\n        emulateTransitionEnd(element, () => alertTransitionEnd(self));\n      } else alertTransitionEnd(self);\n    }\n  }\n\n  /** Remove the component from target element. */\n  dispose() {\n    toggleAlertHandler(this);\n    super.dispose();\n  }\n}\n\nObjectAssign(Alert, {\n  selector: alertSelector,\n  init: alertInitCallback,\n  getInstance: getAlertInstance,\n});\n\n/**\n * A global namespace for aria-pressed.\n * @type {string}\n */\nconst ariaPressed = 'aria-pressed';\n\n/**\n * Shortcut for `HTMLElement.setAttribute()` method.\n * @param  {HTMLElement | Element} element target element\n * @param  {string} attribute attribute name\n * @param  {string} value attribute value\n * @returns {void}\n */\nconst setAttribute = (element, attribute, value) => element.setAttribute(attribute, value);\n\n/**\n * Add class to `HTMLElement.classList`.\n *\n * @param {HTMLElement | Element} element target\n * @param {string} classNAME to add\n * @returns {void}\n */\nfunction addClass(element, classNAME) {\n  element.classList.add(classNAME);\n}\n\n/**\n * Global namespace for most components active class.\n */\nconst activeClass = 'active';\n\n/**\n * Global namespace for most components `toggle` option.\n */\nconst dataBsToggle = 'data-bs-toggle';\n\n/** @type {string} */\nconst buttonString = 'button';\n\n/** @type {string} */\nconst buttonComponent = 'Button';\n\n/* Native JavaScript for Bootstrap 5 | Button\n---------------------------------------------*/\n\n// BUTTON PRIVATE GC\n// =================\nconst buttonSelector = `[${dataBsToggle}=\"${buttonString}\"]`;\n\n/**\n * Static method which returns an existing `Button` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Button>}\n */\nconst getButtonInstance = (element) => getInstance(element, buttonComponent);\n\n/**\n * A `Button` initialization callback.\n * @type {BSN.InitCallback<Button>}\n */\nconst buttonInitCallback = (element) => new Button(element);\n\n// BUTTON PRIVATE METHOD\n// =====================\n/**\n * Toggles on/off the `click` event listener.\n * @param {Button} self the `Button` instance\n * @param {boolean=} add when `true`, event listener is added\n */\nfunction toggleButtonHandler(self, add) {\n  const action = add ? addListener : removeListener;\n  action(self.element, mouseclickEvent, self.toggle);\n}\n\n// BUTTON DEFINITION\n// =================\n/** Creates a new `Button` instance. */\nclass Button extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target usually a `.btn` element\n   */\n  constructor(target) {\n    super(target);\n    const self = this;\n\n    // initialization element\n    const { element } = self;\n\n    // set initial state\n    /** @type {boolean} */\n    self.isActive = hasClass(element, activeClass);\n    setAttribute(element, ariaPressed, `${!!self.isActive}`);\n\n    // add event listener\n    toggleButtonHandler(self, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return buttonComponent; }\n  /* eslint-enable */\n\n  // BUTTON PUBLIC METHODS\n  // =====================\n  /**\n   * Toggles the state of the target button.\n   * @param {MouseEvent} e usually `click` Event object\n   */\n  toggle(e) {\n    if (e) e.preventDefault();\n    // @ts-ignore\n    const self = e ? getButtonInstance(this) : this;\n    if (!self) return;\n    const { element } = self;\n\n    if (hasClass(element, 'disabled')) return;\n    self.isActive = hasClass(element, activeClass);\n    const { isActive } = self;\n\n    const action = isActive ? removeClass : addClass;\n\n    action(element, activeClass);\n    setAttribute(element, ariaPressed, isActive ? 'false' : 'true');\n  }\n\n  /** Removes the `Button` component from the target element. */\n  dispose() {\n    toggleButtonHandler(this);\n    super.dispose();\n  }\n}\n\nObjectAssign(Button, {\n  selector: buttonSelector,\n  init: buttonInitCallback,\n  getInstance: getButtonInstance,\n});\n\n/**\n * A global namespace for `mouseenter` event.\n * @type {string}\n */\nconst mouseenterEvent = 'mouseenter';\n\n/**\n * A global namespace for `mouseleave` event.\n * @type {string}\n */\nconst mouseleaveEvent = 'mouseleave';\n\n/**\n * A global namespace for `keydown` event.\n * @type {string}\n */\nconst keydownEvent = 'keydown';\n\n/**\n * A global namespace for `touchmove` event.\n * @type {string}\n */\nconst touchmoveEvent = 'touchmove';\n\n/**\n * A global namespace for `touchend` event.\n * @type {string}\n */\nconst touchendEvent = 'touchend';\n\n/**\n * A global namespace for `touchstart` event.\n * @type {string}\n */\nconst touchstartEvent = 'touchstart';\n\n/**\n * A global namespace for `ArrowLeft` key.\n * @type {string} e.which = 37 equivalent\n */\nconst keyArrowLeft = 'ArrowLeft';\n\n/**\n * A global namespace for `ArrowRight` key.\n * @type {string} e.which = 39 equivalent\n */\nconst keyArrowRight = 'ArrowRight';\n\n/**\n * Returns the `Window` object of a target node.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {(Node | HTMLElement | Element | Window)=} node target node\n * @returns {globalThis}\n */\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (!(node instanceof Window)) {\n    const { ownerDocument } = node;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  // @ts-ignore\n  return node;\n}\n\n/**\n * Returns the bounding client rect of a target `HTMLElement`.\n *\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement | Element} element event.target\n * @param {boolean=} includeScale when *true*, the target scale is also computed\n * @returns {SHORTER.BoundingClientRect} the bounding client rect object\n */\nfunction getBoundingClientRect(element, includeScale) {\n  const {\n    width, height, top, right, bottom, left,\n  } = element.getBoundingClientRect();\n  let scaleX = 1;\n  let scaleY = 1;\n\n  if (includeScale && element instanceof HTMLElement) {\n    const { offsetWidth, offsetHeight } = element;\n    scaleX = offsetWidth > 0 ? Math.round(width) / offsetWidth || 1 : 1;\n    scaleY = offsetHeight > 0 ? Math.round(height) / offsetHeight || 1 : 1;\n  }\n\n  return {\n    width: width / scaleX,\n    height: height / scaleY,\n    top: top / scaleY,\n    right: right / scaleX,\n    bottom: bottom / scaleY,\n    left: left / scaleX,\n    x: left / scaleX,\n    y: top / scaleY,\n  };\n}\n\n/**\n * Returns the `document.documentElement` or the `<html>` element.\n *\n * @param {(Node | HTMLElement | Element | globalThis)=} node\n * @returns {HTMLElement | HTMLHtmlElement}\n */\nfunction getDocumentElement(node) {\n  return getDocument(node).documentElement;\n}\n\n/**\n * Utility to determine if an `HTMLElement`\n * is partially visible in viewport.\n *\n * @param {HTMLElement | Element} element target\n * @return {boolean} the query result\n */\nconst isElementInScrollRange = (element) => {\n  const { top, bottom } = getBoundingClientRect(element);\n  const { clientHeight } = getDocumentElement(element);\n  // checks bottom && top\n  return top <= clientHeight && bottom >= 0;\n};\n\n/**\n * Checks if a page is Right To Left.\n * @param {(HTMLElement | Element)=} node the target\n * @returns {boolean} the query result\n */\nconst isRTL = (node) => getDocumentElement(node).dir === 'rtl';\n\n/**\n * A shortcut for `(document|Element).querySelectorAll`.\n *\n * @param {string} selector the input selector\n * @param {(HTMLElement | Element | Document | Node)=} parent optional node to look into\n * @return {NodeListOf<HTMLElement | Element>} the query result\n */\nfunction querySelectorAll(selector, parent) {\n  const lookUp = parent && parentNodes\n    .some((x) => parent instanceof x) ? parent : getDocument();\n  // @ts-ignore -- `ShadowRoot` is also a node\n  return lookUp.querySelectorAll(selector);\n}\n\n/**\n * Shortcut for `HTMLElement.getElementsByClassName` method. Some `Node` elements\n * like `ShadowRoot` do not support `getElementsByClassName`.\n *\n * @param {string} selector the class name\n * @param {(HTMLElement | Element | Document)=} parent optional Element to look into\n * @return {HTMLCollectionOf<HTMLElement | Element>} the 'HTMLCollection'\n */\nfunction getElementsByClassName(selector, parent) {\n  const lookUp = parent && parentNodes.some((x) => parent instanceof x)\n    ? parent : getDocument();\n  return lookUp.getElementsByClassName(selector);\n}\n\n/** @type {Map<HTMLElement | Element, any>} */\nconst TimeCache = new Map();\n/**\n * An interface for one or more `TimerHandler`s per `Element`.\n * @see https://github.com/thednp/navbar.js/\n */\nconst Timer = {\n  /**\n   * Sets a new timeout timer for an element, or element -> key association.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {ReturnType<TimerHandler>} callback the callback\n   * @param {number} delay the execution delay\n   * @param {string=} key a unique key\n   */\n  set: (target, callback, delay, key) => {\n    const element = querySelector(target);\n\n    if (!element) return;\n\n    if (key && key.length) {\n      if (!TimeCache.has(element)) {\n        TimeCache.set(element, new Map());\n      }\n      const keyTimers = TimeCache.get(element);\n      keyTimers.set(key, setTimeout(callback, delay));\n    } else {\n      TimeCache.set(element, setTimeout(callback, delay));\n    }\n  },\n\n  /**\n   * Returns the timer associated with the target.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string=} key a unique\n   * @returns {number?} the timer\n   */\n  get: (target, key) => {\n    const element = querySelector(target);\n\n    if (!element) return null;\n    const keyTimers = TimeCache.get(element);\n\n    if (key && key.length && keyTimers && keyTimers.get) {\n      return keyTimers.get(key) || null;\n    }\n    return keyTimers || null;\n  },\n\n  /**\n   * Clears the element's timer.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string=} key a unique key\n   */\n  clear: (target, key) => {\n    const element = querySelector(target);\n\n    if (!element) return;\n\n    if (key && key.length) {\n      const keyTimers = TimeCache.get(element);\n\n      if (keyTimers && keyTimers.get) {\n        clearTimeout(keyTimers.get(key));\n        keyTimers.delete(key);\n        if (keyTimers.size === 0) {\n          TimeCache.delete(element);\n        }\n      }\n    } else {\n      clearTimeout(TimeCache.get(element));\n      TimeCache.delete(element);\n    }\n  },\n};\n\n/**\n * Utility to force re-paint of an `HTMLElement` target.\n *\n * @param {HTMLElement | Element} element is the target\n * @return {number} the `Element.offsetHeight` value\n */\n// @ts-ignore\nconst reflow = (element) => element.offsetHeight;\n\n/**\n * A global namespace for most scroll event listeners.\n * @type {Partial<AddEventListenerOptions>}\n */\nconst passiveHandler = { passive: true };\n\n/**\n * Global namespace for most components `target` option.\n */\nconst dataBsTarget = 'data-bs-target';\n\n/** @type {string} */\nconst carouselString = 'carousel';\n\n/** @type {string} */\nconst carouselComponent = 'Carousel';\n\n/**\n * Global namespace for most components `parent` option.\n */\nconst dataBsParent = 'data-bs-parent';\n\n/**\n * Global namespace for most components `container` option.\n */\nconst dataBsContainer = 'data-bs-container';\n\n/**\n * Returns the `Element` that THIS one targets\n * via `data-bs-target`, `href`, `data-bs-parent` or `data-bs-container`.\n *\n * @param {HTMLElement | Element} element the target element\n * @returns {(HTMLElement | Element)?} the query result\n */\nfunction getTargetElement(element) {\n  const targetAttr = [dataBsTarget, dataBsParent, dataBsContainer, 'href'];\n  const doc = getDocument(element);\n\n  return targetAttr.map((att) => {\n    const attValue = getAttribute(element, att);\n    if (attValue) {\n      return att === dataBsParent ? closest(element, attValue) : querySelector(attValue, doc);\n    }\n    return null;\n  }).filter((x) => x)[0];\n}\n\n/* Native JavaScript for Bootstrap 5 | Carousel\n----------------------------------------------- */\n\n// CAROUSEL PRIVATE GC\n// ===================\nconst carouselSelector = `[data-bs-ride=\"${carouselString}\"]`;\nconst carouselItem = `${carouselString}-item`;\nconst dataBsSlideTo = 'data-bs-slide-to';\nconst dataBsSlide = 'data-bs-slide';\nconst pausedClass = 'paused';\n\nconst carouselDefaults = {\n  pause: 'hover',\n  keyboard: false,\n  touch: true,\n  interval: 5000,\n};\n\n/**\n * Static method which returns an existing `Carousel` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Carousel>}\n */\nconst getCarouselInstance = (element) => getInstance(element, carouselComponent);\n\n/**\n * A `Carousel` initialization callback.\n * @type {BSN.InitCallback<Carousel>}\n */\nconst carouselInitCallback = (element) => new Carousel(element);\n\nlet startX = 0;\nlet currentX = 0;\nlet endX = 0;\n\n// CAROUSEL CUSTOM EVENTS\n// ======================\nconst carouselSlideEvent = OriginalEvent(`slide.bs.${carouselString}`);\nconst carouselSlidEvent = OriginalEvent(`slid.bs.${carouselString}`);\n\n// CAROUSEL EVENT HANDLERS\n// =======================\n/**\n * The `transitionend` event listener of the `Carousel`.\n * @param {Carousel} self the `Carousel` instance\n */\nfunction carouselTransitionEndHandler(self) {\n  const {\n    index, direction, element, slides, options,\n  } = self;\n\n  // discontinue disposed instances\n  if (self.isAnimating && getCarouselInstance(element)) {\n    const activeItem = getActiveIndex(self);\n    const orientation = direction === 'left' ? 'next' : 'prev';\n    const directionClass = direction === 'left' ? 'start' : 'end';\n\n    addClass(slides[index], activeClass);\n    removeClass(slides[index], `${carouselItem}-${orientation}`);\n    removeClass(slides[index], `${carouselItem}-${directionClass}`);\n\n    removeClass(slides[activeItem], activeClass);\n    removeClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n    dispatchEvent(element, carouselSlidEvent);\n    Timer.clear(element, dataBsSlide);\n\n    // check for element, might have been disposed\n    if (!getDocument(element).hidden && options.interval\n      && !self.isPaused) {\n      self.cycle();\n    }\n  }\n}\n\n/**\n * Handles the `mouseenter` / `touchstart` events when *options.pause*\n * is set to `hover`.\n *\n * @this {HTMLElement | Element}\n */\nfunction carouselPauseHandler() {\n  const element = this;\n  const self = getCarouselInstance(element);\n\n  if (self && !self.isPaused && !Timer.get(element, pausedClass)) {\n    addClass(element, pausedClass);\n  }\n}\n\n/**\n * Handles the `mouseleave` / `touchend` events when *options.pause*\n * is set to `hover`.\n *\n * @this {HTMLElement | Element}\n */\nfunction carouselResumeHandler() {\n  const element = this;\n  const self = getCarouselInstance(element);\n\n  if (self && self.isPaused && !Timer.get(element, pausedClass)) {\n    self.cycle();\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` indicators.\n *\n * @this {HTMLElement}\n * @param {MouseEvent} e the `Event` object\n */\nfunction carouselIndicatorHandler(e) {\n  e.preventDefault();\n  const indicator = this;\n  const element = closest(indicator, carouselSelector) || getTargetElement(indicator);\n  if (!element) return;\n  const self = getCarouselInstance(element);\n\n  if (!self || self.isAnimating) return;\n\n  // @ts-ignore\n  const newIndex = +getAttribute(indicator, dataBsSlideTo);\n\n  if (indicator && !hasClass(indicator, activeClass) // event target is not active\n    && !Number.isNaN(newIndex)) { // AND has the specific attribute\n    self.to(newIndex); // do the slide\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` arrows.\n *\n * @this {HTMLElement}\n * @param {MouseEvent} e the `Event` object\n */\nfunction carouselControlsHandler(e) {\n  e.preventDefault();\n  const control = this;\n  const element = closest(control, carouselSelector) || getTargetElement(control);\n  const self = element && getCarouselInstance(element);\n  if (!self || self.isAnimating) return;\n  const orientation = getAttribute(control, dataBsSlide);\n\n  if (orientation === 'next') {\n    self.next();\n  } else if (orientation === 'prev') {\n    self.prev();\n  }\n}\n\n/**\n * Handles the keyboard `keydown` event for the visible `Carousel` elements.\n *\n * @param {KeyboardEvent} e the `Event` object\n */\nfunction carouselKeyHandler({ code }) {\n  const [element] = [...querySelectorAll(carouselSelector)]\n    .filter((x) => isElementInScrollRange(x));\n\n  const self = getCarouselInstance(element);\n  if (!self) return;\n  const RTL = isRTL();\n  const arrowKeyNext = !RTL ? keyArrowRight : keyArrowLeft;\n  const arrowKeyPrev = !RTL ? keyArrowLeft : keyArrowRight;\n\n  if (code === arrowKeyPrev) self.prev();\n  else if (code === arrowKeyNext) self.next();\n}\n\n// CAROUSEL TOUCH HANDLERS\n// =======================\n/**\n * Handles the `touchdown` event for the `Carousel` element.\n *\n * @this {HTMLElement | Element}\n * @param {TouchEvent} e the `Event` object\n */\nfunction carouselTouchDownHandler(e) {\n  const element = this;\n  const self = getCarouselInstance(element);\n\n  if (!self || self.isTouch) { return; }\n\n  startX = e.changedTouches[0].pageX;\n\n  // @ts-ignore\n  if (element.contains(e.target)) {\n    self.isTouch = true;\n    toggleCarouselTouchHandlers(self, true);\n  }\n}\n\n/**\n * Handles the `touchmove` event for the `Carousel` element.\n *\n * @this {HTMLElement | Element}\n * @param {TouchEvent} e\n */\nfunction carouselTouchMoveHandler(e) {\n  const { changedTouches, type } = e;\n  const self = getCarouselInstance(this);\n\n  if (!self || !self.isTouch) { return; }\n\n  currentX = changedTouches[0].pageX;\n\n  // cancel touch if more than one changedTouches detected\n  if (type === touchmoveEvent && changedTouches.length > 1) {\n    e.preventDefault();\n  }\n}\n\n/**\n * Handles the `touchend` event for the `Carousel` element.\n *\n * @this {HTMLElement | Element}\n\n * @param {TouchEvent} e\n */\nfunction carouselTouchEndHandler(e) {\n  const element = this;\n  const self = getCarouselInstance(element);\n\n  if (!self || !self.isTouch) { return; }\n\n  endX = currentX || e.changedTouches[0].pageX;\n\n  if (self.isTouch) {\n    // the event target is outside the carousel OR carousel doens't include the related target\n    // @ts-ignore\n    if ((!element.contains(e.target) || !element.contains(e.relatedTarget))\n      && Math.abs(startX - endX) < 75) { // AND swipe distance is less than 75px\n      // when the above conditions are satisfied, no need to continue\n      return;\n    } // OR determine next index to slide to\n    if (currentX < startX) {\n      self.index += 1;\n    } else if (currentX > startX) {\n      self.index -= 1;\n    }\n\n    self.isTouch = false;\n    self.to(self.index); // do the slide\n\n    toggleCarouselTouchHandlers(self); // remove touch events handlers\n  }\n}\n\n// CAROUSEL PRIVATE METHODS\n// ========================\n/**\n * Sets active indicator for the `Carousel` instance.\n * @param {Carousel} self the `Carousel` instance\n * @param {number} pageIndex the index of the new active indicator\n */\nfunction activateCarouselIndicator(self, pageIndex) {\n  const { indicators } = self;\n  [...indicators].forEach((x) => removeClass(x, activeClass));\n\n  if (self.indicators[pageIndex]) addClass(indicators[pageIndex], activeClass);\n}\n\n/**\n * Toggles the touch event listeners for a given `Carousel` instance.\n * @param {Carousel} self the `Carousel` instance\n * @param {boolean=} add when `TRUE` event listeners are added\n */\nfunction toggleCarouselTouchHandlers(self, add) {\n  const { element } = self;\n  const action = add ? addListener : removeListener;\n  action(element, touchmoveEvent, carouselTouchMoveHandler, passiveHandler);\n  action(element, touchendEvent, carouselTouchEndHandler, passiveHandler);\n}\n\n/**\n * Toggles all event listeners for a given `Carousel` instance.\n * @param {Carousel} self the `Carousel` instance\n * @param {boolean=} add when `TRUE` event listeners are added\n */\nfunction toggleCarouselHandlers(self, add) {\n  const {\n    element, options, slides, controls, indicators,\n  } = self;\n  const {\n    touch, pause, interval, keyboard,\n  } = options;\n  const action = add ? addListener : removeListener;\n\n  if (pause && interval) {\n    action(element, mouseenterEvent, carouselPauseHandler);\n    action(element, mouseleaveEvent, carouselResumeHandler);\n    action(element, touchstartEvent, carouselPauseHandler, passiveHandler);\n    action(element, touchendEvent, carouselResumeHandler, passiveHandler);\n  }\n\n  if (touch && slides.length > 1) {\n    action(element, touchstartEvent, carouselTouchDownHandler, passiveHandler);\n  }\n\n  if (controls.length) {\n    controls.forEach((arrow) => {\n      if (arrow) action(arrow, mouseclickEvent, carouselControlsHandler);\n    });\n  }\n\n  if (indicators.length) {\n    indicators.forEach((indicator) => {\n      action(indicator, mouseclickEvent, carouselIndicatorHandler);\n    });\n  }\n  // @ts-ignore\n  if (keyboard) action(getWindow(element), keydownEvent, carouselKeyHandler);\n}\n\n/**\n * Returns the index of the current active item.\n * @param {Carousel} self the `Carousel` instance\n * @returns {number} the query result\n */\nfunction getActiveIndex(self) {\n  const { slides, element } = self;\n  const activeItem = querySelector(`.${carouselItem}.${activeClass}`, element);\n  // @ts-ignore\n  return [...slides].indexOf(activeItem);\n}\n\n// CAROUSEL DEFINITION\n// ===================\n/** Creates a new `Carousel` instance. */\nclass Carousel extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target mostly a `.carousel` element\n   * @param {BSN.Options.Carousel=} config instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n\n    // additional properties\n    /** @type {string} */\n    self.direction = isRTL() ? 'right' : 'left';\n    /** @type {number} */\n    self.index = 0;\n    /** @type {boolean} */\n    self.isTouch = false;\n\n    // initialization element\n    const { element } = self;\n    // carousel elements\n    // a LIVE collection is prefferable\n    self.slides = getElementsByClassName(carouselItem, element);\n    const { slides } = self;\n\n    // invalidate when not enough items\n    // no need to go further\n    if (slides.length < 2) { return; }\n\n    self.controls = [\n      ...querySelectorAll(`[${dataBsSlide}]`, element),\n      ...querySelectorAll(`[${dataBsSlide}][${dataBsTarget}=\"#${element.id}\"]`),\n    ];\n\n    /** @type {(HTMLElement | Element)?} */\n    self.indicator = querySelector(`.${carouselString}-indicators`, element);\n\n    // a LIVE collection is prefferable\n    /** @type {(HTMLElement | Element)[]} */\n    self.indicators = [\n      ...(self.indicator ? querySelectorAll(`[${dataBsSlideTo}]`, self.indicator) : []),\n      ...querySelectorAll(`[${dataBsSlideTo}][${dataBsTarget}=\"#${element.id}\"]`),\n    ];\n\n    // set JavaScript and DATA API options\n    const { options } = self;\n\n    // don't use TRUE as interval, it's actually 0, use the default 5000ms better\n    self.options.interval = options.interval === true\n      ? carouselDefaults.interval\n      : options.interval;\n\n    // set first slide active if none\n    if (getActiveIndex(self) < 0) {\n      if (slides.length) addClass(slides[0], activeClass);\n      if (self.indicators.length) activateCarouselIndicator(self, 0);\n    }\n\n    // attach event handlers\n    toggleCarouselHandlers(self, true);\n\n    // start to cycle if interval is set\n    if (options.interval) self.cycle();\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return carouselComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */\n  get defaults() { return carouselDefaults; }\n  /* eslint-enable */\n\n  /**\n   * Check if instance is paused.\n   * @returns {boolean}\n  */\n  get isPaused() {\n    return hasClass(this.element, pausedClass);\n  }\n\n  /**\n   * Check if instance is animating.\n   * @returns {boolean}\n  */\n  get isAnimating() {\n    return querySelector(`.${carouselItem}-next,.${carouselItem}-prev`, this.element) !== null;\n  }\n\n  // CAROUSEL PUBLIC METHODS\n  // =======================\n  /** Slide automatically through items. */\n  cycle() {\n    const self = this;\n    const { element, options, isPaused } = self;\n\n    Timer.clear(element, carouselString);\n    if (isPaused) {\n      Timer.clear(element, pausedClass);\n      removeClass(element, pausedClass);\n    }\n\n    Timer.set(element, () => {\n      if (!self.isPaused && isElementInScrollRange(element)) {\n        self.index += 1;\n        self.to(self.index);\n      }\n    }, options.interval, carouselString);\n  }\n\n  /** Pause the automatic cycle. */\n  pause() {\n    const self = this;\n    const { element, options } = self;\n    if (!self.isPaused && options.interval) {\n      addClass(element, pausedClass);\n      Timer.set(element, () => {}, 1, pausedClass);\n    }\n  }\n\n  /** Slide to the next item. */\n  next() {\n    const self = this;\n    if (!self.isAnimating) { self.index += 1; self.to(self.index); }\n  }\n\n  /** Slide to the previous item. */\n  prev() {\n    const self = this;\n    if (!self.isAnimating) { self.index -= 1; self.to(self.index); }\n  }\n\n  /**\n   * Jump to the item with the `idx` index.\n   * @param {number} idx the index of the item to jump to\n   */\n  to(idx) {\n    const self = this;\n    const {\n      element, slides, options,\n    } = self;\n    const activeItem = getActiveIndex(self);\n    const RTL = isRTL();\n    let next = idx;\n\n    // when controled via methods, make sure to check again\n    // first return if we're on the same item #227\n    if (self.isAnimating || activeItem === next) return;\n\n    // determine transition direction\n    if ((activeItem < next) || (activeItem === 0 && next === slides.length - 1)) {\n      self.direction = RTL ? 'right' : 'left'; // next\n    } else if ((activeItem > next) || (activeItem === slides.length - 1 && next === 0)) {\n      self.direction = RTL ? 'left' : 'right'; // prev\n    }\n    const { direction } = self;\n\n    // find the right next index\n    if (next < 0) { next = slides.length - 1; } else if (next >= slides.length) { next = 0; }\n\n    // orientation, class name, eventProperties\n    const orientation = direction === 'left' ? 'next' : 'prev';\n    const directionClass = direction === 'left' ? 'start' : 'end';\n\n    const eventProperties = {\n      relatedTarget: slides[next],\n      from: activeItem,\n      to: next,\n      direction,\n    };\n\n    // update event properties\n    ObjectAssign(carouselSlideEvent, eventProperties);\n    ObjectAssign(carouselSlidEvent, eventProperties);\n\n    // discontinue when prevented\n    dispatchEvent(element, carouselSlideEvent);\n    if (carouselSlideEvent.defaultPrevented) return;\n\n    // update index\n    self.index = next;\n    activateCarouselIndicator(self, next);\n\n    if (getElementTransitionDuration(slides[next]) && hasClass(element, 'slide')) {\n      Timer.set(element, () => {\n        addClass(slides[next], `${carouselItem}-${orientation}`);\n        reflow(slides[next]);\n        addClass(slides[next], `${carouselItem}-${directionClass}`);\n        addClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n        emulateTransitionEnd(slides[next], () => carouselTransitionEndHandler(self));\n      }, 17, dataBsSlide);\n    } else {\n      addClass(slides[next], activeClass);\n      removeClass(slides[activeItem], activeClass);\n\n      Timer.set(element, () => {\n        Timer.clear(element, dataBsSlide);\n        // check for element, might have been disposed\n        if (element && options.interval && !self.isPaused) {\n          self.cycle();\n        }\n\n        dispatchEvent(element, carouselSlidEvent);\n      }, 17, dataBsSlide);\n    }\n  }\n\n  /** Remove `Carousel` component from target. */\n  dispose() {\n    const self = this;\n    const { slides } = self;\n    const itemClasses = ['start', 'end', 'prev', 'next'];\n\n    [...slides].forEach((slide, idx) => {\n      if (hasClass(slide, activeClass)) activateCarouselIndicator(self, idx);\n      itemClasses.forEach((c) => removeClass(slide, `${carouselItem}-${c}`));\n    });\n\n    toggleCarouselHandlers(self);\n    super.dispose();\n  }\n}\n\nObjectAssign(Carousel, {\n  selector: carouselSelector,\n  init: carouselInitCallback,\n  getInstance: getCarouselInstance,\n});\n\n/**\n * A global namespace for aria-expanded.\n * @type {string}\n */\nconst ariaExpanded = 'aria-expanded';\n\n/**\n * Global namespace for most components `collapsing` class.\n * As used by `Collapse` / `Tab`.\n */\nconst collapsingClass = 'collapsing';\n\n/** @type {string} */\nconst collapseString = 'collapse';\n\n/** @type {string} */\nconst collapseComponent = 'Collapse';\n\n/* Native JavaScript for Bootstrap 5 | Collapse\n----------------------------------------------- */\n\n// COLLAPSE GC\n// ===========\nconst collapseSelector = `.${collapseString}`;\nconst collapseToggleSelector = `[${dataBsToggle}=\"${collapseString}\"]`;\nconst collapseDefaults = { parent: null };\n\n/**\n * Static method which returns an existing `Collapse` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Collapse>}\n */\nconst getCollapseInstance = (element) => getInstance(element, collapseComponent);\n\n/**\n * A `Collapse` initialization callback.\n * @type {BSN.InitCallback<Collapse>}\n */\nconst collapseInitCallback = (element) => new Collapse(element);\n\n// COLLAPSE CUSTOM EVENTS\n// ======================\nconst showCollapseEvent = OriginalEvent(`show.bs.${collapseString}`);\nconst shownCollapseEvent = OriginalEvent(`shown.bs.${collapseString}`);\nconst hideCollapseEvent = OriginalEvent(`hide.bs.${collapseString}`);\nconst hiddenCollapseEvent = OriginalEvent(`hidden.bs.${collapseString}`);\n\n// COLLAPSE PRIVATE METHODS\n// ========================\n/**\n * Expand the designated `Element`.\n * @param {Collapse} self the `Collapse` instance\n */\nfunction expandCollapse(self) {\n  const {\n    element, parent, triggers,\n  } = self;\n\n  dispatchEvent(element, showCollapseEvent);\n  if (showCollapseEvent.defaultPrevented) return;\n\n  Timer.set(element, () => {}, 17);\n  if (parent) Timer.set(parent, () => {}, 17);\n\n  addClass(element, collapsingClass);\n  removeClass(element, collapseString);\n\n  // @ts-ignore\n  element.style.height = `${element.scrollHeight}px`;\n\n  emulateTransitionEnd(element, () => {\n    Timer.clear(element);\n    if (parent) Timer.clear(parent);\n\n    triggers.forEach((btn) => setAttribute(btn, ariaExpanded, 'true'));\n\n    removeClass(element, collapsingClass);\n    addClass(element, collapseString);\n    addClass(element, showClass);\n\n    // @ts-ignore\n    element.style.height = '';\n\n    dispatchEvent(element, shownCollapseEvent);\n  });\n}\n\n/**\n * Collapse the designated `Element`.\n * @param {Collapse} self the `Collapse` instance\n */\nfunction collapseContent(self) {\n  const {\n    // @ts-ignore\n    element, parent, triggers,\n  } = self;\n\n  dispatchEvent(element, hideCollapseEvent);\n\n  if (hideCollapseEvent.defaultPrevented) return;\n\n  Timer.set(element, () => {}, 17);\n  if (parent) Timer.set(parent, () => {}, 17);\n\n  // @ts-ignore\n  element.style.height = `${element.scrollHeight}px`;\n\n  removeClass(element, collapseString);\n  removeClass(element, showClass);\n  addClass(element, collapsingClass);\n\n  reflow(element);\n  // @ts-ignore\n  element.style.height = '0px';\n\n  emulateTransitionEnd(element, () => {\n    Timer.clear(element);\n    if (parent) Timer.clear(parent);\n\n    triggers.forEach((btn) => setAttribute(btn, ariaExpanded, 'false'));\n\n    removeClass(element, collapsingClass);\n    addClass(element, collapseString);\n\n    // @ts-ignore\n    element.style.height = '';\n\n    dispatchEvent(element, hiddenCollapseEvent);\n  });\n}\n\n/**\n * Toggles on/off the event listener(s) of the `Collapse` instance.\n * @param {Collapse} self the `Collapse` instance\n * @param {boolean=} add when `true`, the event listener is added\n */\nfunction toggleCollapseHandler(self, add) {\n  const action = add ? addListener : removeListener;\n  const { triggers } = self;\n\n  if (triggers.length) {\n    triggers.forEach((btn) => action(btn, mouseclickEvent, collapseClickHandler));\n  }\n}\n\n// COLLAPSE EVENT HANDLER\n// ======================\n/**\n * Handles the `click` event for the `Collapse` instance.\n * @param {MouseEvent} e the `Event` object\n */\nfunction collapseClickHandler(e) {\n  const { target } = e; // @ts-ignore - our target is `HTMLElement`\n  const trigger = target && closest(target, collapseToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getCollapseInstance(element);\n  if (self) self.toggle();\n\n  // event target is anchor link #398\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n}\n\n// COLLAPSE DEFINITION\n// ===================\n\n/** Returns a new `Colapse` instance. */\nclass Collapse extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target and `Element` that matches the selector\n   * @param {BSN.Options.Collapse=} config instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n\n    // initialization element\n    const { element, options } = self;\n\n    // set triggering elements\n    /** @type {(HTMLElement | Element)[]} */\n    self.triggers = [...querySelectorAll(collapseToggleSelector)]\n      .filter((btn) => getTargetElement(btn) === element);\n\n    // set parent accordion\n    /** @type {(HTMLElement | Element)?} */\n    self.parent = querySelector(options.parent);\n\n    // add event listeners\n    toggleCollapseHandler(self, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return collapseComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */\n  get defaults() { return collapseDefaults; }\n  /* eslint-enable */\n\n  // COLLAPSE PUBLIC METHODS\n  // =======================\n  /** Toggles the visibility of the collapse. */\n  toggle() {\n    const self = this;\n    if (!hasClass(self.element, showClass)) self.show();\n    else self.hide();\n  }\n\n  /** Hides the collapse. */\n  hide() {\n    const self = this;\n    const { triggers, element } = self;\n    if (Timer.get(element)) return;\n\n    collapseContent(self);\n    if (triggers.length) {\n      triggers.forEach((btn) => addClass(btn, `${collapseString}d`));\n    }\n  }\n\n  /** Shows the collapse. */\n  show() {\n    const self = this;\n    const {\n      element, parent, triggers,\n    } = self;\n    let activeCollapse;\n    let activeCollapseInstance;\n\n    if (parent) {\n      activeCollapse = [...querySelectorAll(`.${collapseString}.${showClass}`, parent)]\n        .find((i) => getCollapseInstance(i));\n      activeCollapseInstance = activeCollapse && getCollapseInstance(activeCollapse);\n    }\n\n    if ((!parent || (parent && !Timer.get(parent))) && !Timer.get(element)) {\n      if (activeCollapseInstance && activeCollapse !== element) {\n        collapseContent(activeCollapseInstance);\n        activeCollapseInstance.triggers.forEach((btn) => {\n          addClass(btn, `${collapseString}d`);\n        });\n      }\n\n      expandCollapse(self);\n      if (triggers.length) {\n        triggers.forEach((btn) => removeClass(btn, `${collapseString}d`));\n      }\n    }\n  }\n\n  /** Remove the `Collapse` component from the target `Element`. */\n  dispose() {\n    const self = this;\n    toggleCollapseHandler(self);\n\n    super.dispose();\n  }\n}\n\nObjectAssign(Collapse, {\n  selector: collapseSelector,\n  init: collapseInitCallback,\n  getInstance: getCollapseInstance,\n});\n\n/**\n * A global namespace for `focus` event.\n * @type {string}\n */\nconst focusEvent = 'focus';\n\n/**\n * A global namespace for `keyup` event.\n * @type {string}\n */\nconst keyupEvent = 'keyup';\n\n/**\n * A global namespace for `scroll` event.\n * @type {string}\n */\nconst scrollEvent = 'scroll';\n\n/**\n * A global namespace for `resize` event.\n * @type {string}\n */\nconst resizeEvent = 'resize';\n\n/**\n * A global namespace for `ArrowUp` key.\n * @type {string} e.which = 38 equivalent\n */\nconst keyArrowUp = 'ArrowUp';\n\n/**\n * A global namespace for `ArrowDown` key.\n * @type {string} e.which = 40 equivalent\n */\nconst keyArrowDown = 'ArrowDown';\n\n/**\n * A global namespace for `Escape` key.\n * @type {string} e.which = 27 equivalent\n */\nconst keyEscape = 'Escape';\n\n/**\n * Shortcut for `HTMLElement.hasAttribute()` method.\n * @param  {HTMLElement | Element} element target element\n * @param  {string} attribute attribute name\n * @returns {boolean} the query result\n */\nconst hasAttribute = (element, attribute) => element.hasAttribute(attribute);\n\n/**\n * Shortcut for multiple uses of `HTMLElement.style.propertyName` method.\n * @param  {HTMLElement | Element} element target element\n * @param  {Partial<CSSStyleDeclaration>} styles attribute value\n */\n// @ts-ignore\nconst setElementStyle = (element, styles) => { ObjectAssign(element.style, styles); };\n\n/**\n * Utility to focus an `HTMLElement` target.\n *\n * @param {HTMLElement | Element} element is the target\n */\n// @ts-ignore -- `Element`s resulted from querySelector can focus too\nconst focus = (element) => element.focus();\n\n/**\n * Global namespace for `Dropdown` types / classes.\n */\nconst dropdownMenuClasses = ['dropdown', 'dropup', 'dropstart', 'dropend'];\n\n/** @type {string} */\nconst dropdownComponent = 'Dropdown';\n\n/**\n * Global namespace for `.dropdown-menu`.\n */\nconst dropdownMenuClass = 'dropdown-menu';\n\n/**\n * Checks if an *event.target* or its parent has an `href=\"#\"` value.\n * We need to prevent jumping around onclick, don't we?\n *\n * @param {HTMLElement | HTMLAnchorElement | EventTarget} element the target element\n * @returns {boolean} the query result\n */\nfunction isEmptyAnchor(element) {\n  // @ts-ignore -- `EventTarget` must be `HTMLElement`\n  const parentAnchor = closest(element, 'A');\n  // @ts-ignore -- anchor href starts with #\n  return element && ((hasAttribute(element, 'href') && element.href.slice(-1) === '#')\n    // @ts-ignore -- OR a child of an anchor with href starts with #\n    || (parentAnchor && hasAttribute(parentAnchor, 'href') && parentAnchor.href.slice(-1) === '#'));\n}\n\n/* Native JavaScript for Bootstrap 5 | Dropdown\n----------------------------------------------- */\n\n// DROPDOWN PRIVATE GC\n// ===================\nconst [\n  dropdownString,\n  dropupString,\n  dropstartString,\n  dropendString,\n] = dropdownMenuClasses;\nconst dropdownSelector = `[${dataBsToggle}=\"${dropdownString}\"]`;\n\n/**\n * Static method which returns an existing `Dropdown` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Dropdown>}\n */\nconst getDropdownInstance = (element) => getInstance(element, dropdownComponent);\n\n/**\n * A `Dropdown` initialization callback.\n * @type {BSN.InitCallback<Dropdown>}\n */\nconst dropdownInitCallback = (element) => new Dropdown(element);\n\n// DROPDOWN PRIVATE GC\n// ===================\nconst dropdownMenuEndClass = `${dropdownMenuClass}-end`;\nconst verticalClass = [dropdownString, dropupString];\nconst horizontalClass = [dropstartString, dropendString];\nconst menuFocusTags = ['A', 'BUTTON'];\n\nconst dropdownDefaults = {\n  offset: 5, // [number] 5(px)\n  display: 'dynamic', // [dynamic|static]\n};\n\n// DROPDOWN CUSTOM EVENTS\n// ======================\nconst showDropdownEvent = OriginalEvent(`show.bs.${dropdownString}`);\nconst shownDropdownEvent = OriginalEvent(`shown.bs.${dropdownString}`);\nconst hideDropdownEvent = OriginalEvent(`hide.bs.${dropdownString}`);\nconst hiddenDropdownEvent = OriginalEvent(`hidden.bs.${dropdownString}`);\n\n// DROPDOWN PRIVATE METHODS\n// ========================\n/**\n * Apply specific style or class names to a `.dropdown-menu` to automatically\n * accomodate the layout and the page scroll.\n *\n * @param {Dropdown} self the `Dropdown` instance\n */\nfunction styleDropdown(self) {\n  const {\n    element, menu, parentElement, options,\n  } = self;\n  const { offset } = options;\n\n  // don't apply any style on mobile view\n  if (getElementStyle(menu, 'position') === 'static') return;\n\n  const RTL = isRTL(element);\n  const menuEnd = hasClass(parentElement, dropdownMenuEndClass);\n\n  // reset menu offset and position\n  const resetProps = ['margin', 'top', 'bottom', 'left', 'right'];\n  // @ts-ignore\n  resetProps.forEach((p) => { menu.style[p] = ''; });\n\n  // set initial position class\n  // take into account .btn-group parent as .dropdown\n  let positionClass = dropdownMenuClasses.find((c) => hasClass(parentElement, c)) || dropdownString;\n\n  /** @type {Record<string, Record<string, any>>} */\n  let dropdownMargin = {\n    dropdown: [offset, 0, 0],\n    dropup: [0, 0, offset],\n    dropstart: RTL ? [-1, 0, 0, offset] : [-1, offset, 0],\n    dropend: RTL ? [-1, offset, 0] : [-1, 0, 0, offset],\n  };\n\n  /** @type {Record<string, Record<string, any>>} */\n  const dropdownPosition = {\n    dropdown: { top: '100%' },\n    dropup: { top: 'auto', bottom: '100%' },\n    dropstart: RTL ? { left: '100%', right: 'auto' } : { left: 'auto', right: '100%' },\n    dropend: RTL ? { left: 'auto', right: '100%' } : { left: '100%', right: 'auto' },\n    menuEnd: RTL ? { right: 'auto', left: 0 } : { right: 0, left: 'auto' },\n  };\n\n  // @ts-ignore\n  const { offsetWidth: menuWidth, offsetHeight: menuHeight } = menu;\n\n  const { clientWidth, clientHeight } = getDocumentElement(element);\n  const {\n    left: targetLeft, top: targetTop,\n    width: targetWidth, height: targetHeight,\n  } = getBoundingClientRect(element);\n\n  // dropstart | dropend\n  const leftFullExceed = targetLeft - menuWidth - offset < 0;\n  // dropend\n  const rightFullExceed = targetLeft + menuWidth + targetWidth + offset >= clientWidth;\n  // dropstart | dropend\n  const bottomExceed = targetTop + menuHeight + offset >= clientHeight;\n  // dropdown\n  const bottomFullExceed = targetTop + menuHeight + targetHeight + offset >= clientHeight;\n  // dropup\n  const topExceed = targetTop - menuHeight - offset < 0;\n  // dropdown / dropup\n  const leftExceed = ((!RTL && menuEnd) || (RTL && !menuEnd))\n    && targetLeft + targetWidth - menuWidth < 0;\n  const rightExceed = ((RTL && menuEnd) || (!RTL && !menuEnd))\n    && targetLeft + menuWidth >= clientWidth;\n\n  // recompute position\n  // handle RTL as well\n  if (horizontalClass.includes(positionClass) && leftFullExceed && rightFullExceed) {\n    positionClass = dropdownString;\n  }\n  if (positionClass === dropstartString && (!RTL ? leftFullExceed : rightFullExceed)) {\n    positionClass = dropendString;\n  }\n  if (positionClass === dropendString && (RTL ? leftFullExceed : rightFullExceed)) {\n    positionClass = dropstartString;\n  }\n  if (positionClass === dropupString && topExceed && !bottomFullExceed) {\n    positionClass = dropdownString;\n  }\n  if (positionClass === dropdownString && bottomFullExceed && !topExceed) {\n    positionClass = dropupString;\n  }\n  // override position for horizontal classes\n  if (horizontalClass.includes(positionClass) && bottomExceed) {\n    ObjectAssign(dropdownPosition[positionClass], {\n      top: 'auto', bottom: 0,\n    });\n  }\n  // override position for vertical classes\n  if (verticalClass.includes(positionClass) && (leftExceed || rightExceed)) {\n    // don't realign when menu is wider than window\n    // in both RTL and non-RTL readability is KING\n    if (targetLeft + targetWidth + Math.abs(menuWidth - targetWidth) + offset < clientWidth) {\n      ObjectAssign(dropdownPosition[positionClass],\n        leftExceed ? { left: 0, right: 'auto' } : { left: 'auto', right: 0 });\n    }\n  }\n\n  dropdownMargin = dropdownMargin[positionClass];\n  // @ts-ignore\n  menu.style.margin = `${dropdownMargin.map((x) => (x ? `${x}px` : x)).join(' ')}`;\n\n  setElementStyle(menu, dropdownPosition[positionClass]);\n\n  // update dropdown-menu-end\n  if (hasClass(menu, dropdownMenuEndClass)) {\n    setElementStyle(menu, dropdownPosition.menuEnd);\n  }\n}\n\n/**\n * Returns an `Array` of focusable items in the given dropdown-menu.\n * @param {HTMLElement | Element} menu\n * @returns {(HTMLElement | Element)[]}\n */\nfunction getMenuItems(menu) {\n  // @ts-ignore\n  return [...menu.children].map((c) => {\n    if (c && menuFocusTags.includes(c.tagName)) return c;\n    const { firstElementChild } = c;\n    if (firstElementChild && menuFocusTags.includes(firstElementChild.tagName)) {\n      return firstElementChild;\n    }\n    return null;\n  }).filter((c) => c);\n}\n\n/**\n * Toggles on/off the listeners for the events that close the dropdown\n * as well as event that request a new position for the dropdown.\n *\n * @param {Dropdown} self the `Dropdown` instance\n */\nfunction toggleDropdownDismiss(self) {\n  const { element } = self;\n  const action = self.open ? addListener : removeListener;\n  const doc = getDocument(element);\n\n  action(doc, mouseclickEvent, dropdownDismissHandler);\n  action(doc, focusEvent, dropdownDismissHandler);\n  action(doc, keydownEvent, dropdownPreventScroll);\n  action(doc, keyupEvent, dropdownKeyHandler);\n\n  if (self.options.display === 'dynamic') {\n    [scrollEvent, resizeEvent].forEach((ev) => {\n      // @ts-ignore\n      action(getWindow(element), ev, dropdownLayoutHandler, passiveHandler);\n    });\n  }\n}\n\n/**\n * Toggles on/off the `click` event listener of the `Dropdown`.\n *\n * @param {Dropdown} self the `Dropdown` instance\n * @param {boolean=} add when `true`, it will add the event listener\n */\nfunction toggleDropdownHandler(self, add) {\n  const action = add ? addListener : removeListener;\n  action(self.element, mouseclickEvent, dropdownClickHandler);\n}\n\n/**\n * Returns the currently open `.dropdown` element.\n *\n * @param {(Document | HTMLElement | Element | globalThis)=} element target\n * @returns {HTMLElement?} the query result\n */\nfunction getCurrentOpenDropdown(element) {\n  const currentParent = [...dropdownMenuClasses, 'btn-group', 'input-group']\n    .map((c) => getElementsByClassName(`${c} ${showClass}`), getDocument(element))\n    .find((x) => x.length);\n\n  if (currentParent && currentParent.length) {\n    // @ts-ignore -- HTMLElement is also Element\n    return [...currentParent[0].children]\n      .find((x) => hasAttribute(x, dataBsToggle));\n  }\n  return null;\n}\n\n// DROPDOWN EVENT HANDLERS\n// =======================\n/**\n * Handles the `click` event for the `Dropdown` instance.\n *\n * @param {MouseEvent} e event object\n * @this {Document}\n */\nfunction dropdownDismissHandler(e) {\n  const { target, type } = e;\n  // @ts-ignore\n  if (!target || !target.closest) return; // some weird FF bug #409\n\n  // @ts-ignore\n  const element = getCurrentOpenDropdown(target);\n  if (!element) return;\n\n  const self = getDropdownInstance(element);\n  if (!self) return;\n\n  const { parentElement, menu } = self;\n\n  // @ts-ignore\n  const hasData = closest(target, dropdownSelector) !== null;\n  // @ts-ignore\n  const isForm = parentElement && parentElement.contains(target)\n    // @ts-ignore\n    && (target.tagName === 'form' || closest(target, 'form') !== null);\n\n  // @ts-ignore\n  if (type === mouseclickEvent && isEmptyAnchor(target)) {\n    e.preventDefault();\n  }\n  if (type === focusEvent // @ts-ignore\n    && (target === element || target === menu || menu.contains(target))) {\n    return;\n  }\n\n  if (isForm || hasData) ; else if (self) {\n    self.hide();\n  }\n}\n\n/**\n * Handles `click` event listener for `Dropdown`.\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e event object\n */\nfunction dropdownClickHandler(e) {\n  const element = this;\n  const { target } = e;\n  const self = getDropdownInstance(element);\n\n  if (self) {\n    self.toggle();\n    if (target && isEmptyAnchor(target)) e.preventDefault();\n  }\n}\n\n/**\n * Prevents scroll when dropdown-menu is visible.\n * @param {KeyboardEvent} e event object\n */\nfunction dropdownPreventScroll(e) {\n  if ([keyArrowDown, keyArrowUp].includes(e.code)) e.preventDefault();\n}\n\n/**\n * Handles keyboard `keydown` events for `Dropdown`.\n * @param {KeyboardEvent} e keyboard key\n * @this {Document}\n */\nfunction dropdownKeyHandler(e) {\n  const { code } = e;\n  const element = getCurrentOpenDropdown(this);\n  const self = element && getDropdownInstance(element);\n  const activeItem = element && getDocument(element).activeElement;\n  if (!self || !activeItem) return;\n  const { menu, open } = self;\n  const menuItems = getMenuItems(menu);\n\n  // arrow up & down\n  if (menuItems && menuItems.length && [keyArrowDown, keyArrowUp].includes(code)) {\n    let idx = menuItems.indexOf(activeItem);\n    if (activeItem === element) {\n      idx = 0;\n    } else if (code === keyArrowUp) {\n      idx = idx > 1 ? idx - 1 : 0;\n    } else if (code === keyArrowDown) {\n      idx = idx < menuItems.length - 1 ? idx + 1 : idx;\n    }\n    if (menuItems[idx]) focus(menuItems[idx]);\n  }\n\n  if (keyEscape === code && open) {\n    self.toggle();\n    focus(element);\n  }\n}\n\n/**\n * @this {globalThis}\n * @returns {void}\n */\nfunction dropdownLayoutHandler() {\n  const element = getCurrentOpenDropdown(this);\n  const self = element && getDropdownInstance(element);\n\n  if (self && self.open) styleDropdown(self);\n}\n\n// DROPDOWN DEFINITION\n// ===================\n/** Returns a new Dropdown instance. */\nclass Dropdown extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target Element or string selector\n   * @param {BSN.Options.Dropdown=} config the instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n\n    // initialization element\n    const { element } = self;\n    const { parentElement } = element;\n\n    // set targets\n    /** @type {(Element | HTMLElement)} */\n    // @ts-ignore\n    self.parentElement = parentElement;\n    /** @type {(Element | HTMLElement)} */\n    // @ts-ignore\n    self.menu = querySelector(`.${dropdownMenuClass}`, parentElement);\n\n    // set initial state to closed\n    /** @type {boolean} */\n    self.open = false;\n\n    // add event listener\n    toggleDropdownHandler(self, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return dropdownComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */\n  get defaults() { return dropdownDefaults; }\n  /* eslint-enable */\n\n  // DROPDOWN PUBLIC METHODS\n  // =======================\n  /** Shows/hides the dropdown menu to the user. */\n  toggle() {\n    const self = this;\n\n    if (self.open) self.hide();\n    else self.show();\n  }\n\n  /** Shows the dropdown menu to the user. */\n  show() {\n    const self = this;\n    const {\n      element, open, menu, parentElement,\n    } = self;\n\n    const currentElement = getCurrentOpenDropdown(element);\n    const currentInstance = currentElement && getDropdownInstance(currentElement);\n    if (currentInstance) currentInstance.hide();\n\n    // dispatch\n    [showDropdownEvent, shownDropdownEvent].forEach((e) => { e.relatedTarget = element; });\n    dispatchEvent(parentElement, showDropdownEvent);\n    if (showDropdownEvent.defaultPrevented) return;\n\n    addClass(menu, showClass);\n    addClass(parentElement, showClass);\n    setAttribute(element, ariaExpanded, 'true');\n\n    // change menu position\n    styleDropdown(self);\n\n    self.open = !open;\n\n    setTimeout(() => {\n      focus(element); // focus the element\n      toggleDropdownDismiss(self);\n      dispatchEvent(parentElement, shownDropdownEvent);\n    }, 1);\n  }\n\n  /** Hides the dropdown menu from the user. */\n  hide() {\n    const self = this;\n    const {\n      element, open, menu, parentElement,\n    } = self;\n    [hideDropdownEvent, hiddenDropdownEvent].forEach((e) => { e.relatedTarget = element; });\n\n    dispatchEvent(parentElement, hideDropdownEvent);\n    if (hideDropdownEvent.defaultPrevented) return;\n\n    removeClass(menu, showClass);\n    removeClass(parentElement, showClass);\n    setAttribute(element, ariaExpanded, 'false');\n\n    self.open = !open;\n\n    // only re-attach handler if the instance is not disposed\n    setTimeout(() => toggleDropdownDismiss(self), 1);\n\n    dispatchEvent(parentElement, hiddenDropdownEvent);\n  }\n\n  /** Removes the `Dropdown` component from the target element. */\n  dispose() {\n    const self = this;\n    const { parentElement } = self;\n\n    if (hasClass(parentElement, showClass) && self.open) self.hide();\n\n    toggleDropdownHandler(self);\n\n    super.dispose();\n  }\n}\n\nObjectAssign(Dropdown, {\n  selector: dropdownSelector,\n  init: dropdownInitCallback,\n  getInstance: getDropdownInstance,\n});\n\n/**\n * A global namespace for aria-hidden.\n * @type {string}\n */\nconst ariaHidden = 'aria-hidden';\n\n/**\n * A global namespace for aria-modal.\n * @type {string}\n */\nconst ariaModal = 'aria-modal';\n\n/**\n * Shortcut for `HTMLElement.removeAttribute()` method.\n * @param  {HTMLElement | Element} element target element\n * @param  {string} attribute attribute name\n * @returns {void}\n */\nconst removeAttribute = (element, attribute) => element.removeAttribute(attribute);\n\n/**\n * Returns the `document.body` or the `<body>` element.\n *\n * @param {(Node | HTMLElement | Element | globalThis)=} node\n * @returns {HTMLElement | HTMLBodyElement}\n */\nfunction getDocumentBody(node) {\n  return getDocument(node).body;\n}\n\n/** @type {string} */\nconst modalString = 'modal';\n\n/** @type {string} */\nconst modalComponent = 'Modal';\n\n/**\n * Check if target is a `ShadowRoot`.\n *\n * @param {any} element target\n * @returns {boolean} the query result\n */\nconst isShadowRoot = (element) => {\n  const OwnElement = getWindow(element).ShadowRoot;\n  return element instanceof OwnElement || element instanceof ShadowRoot;\n};\n\n/**\n * Returns the `parentNode` also going through `ShadowRoot`.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {Node | HTMLElement | Element} node the target node\n * @returns {Node | HTMLElement | Element} the apropriate parent node\n */\nfunction getParentNode(node) {\n  if (node.nodeName === 'HTML') {\n    return node;\n  }\n\n  // this is a quicker (but less type safe) way to save quite some bytes from the bundle\n  return (\n    // @ts-ignore\n    node.assignedSlot // step into the shadow DOM of the parent of a slotted node\n    || node.parentNode // @ts-ignore DOM Element detected\n    || (isShadowRoot(node) ? node.host : null) // ShadowRoot detected\n    || getDocumentElement(node) // fallback\n  );\n}\n\n/**\n * Check if a target element is a `<table>`, `<td>` or `<th>`.\n * @param {any} element the target element\n * @returns {boolean} the query result\n */\nconst isTableElement = (element) => ['TABLE', 'TD', 'TH'].includes(element.tagName);\n\n/**\n * Checks if an element is an `HTMLElement`.\n *\n * @param {any} element the target object\n * @returns {boolean} the query result\n */\nconst isHTMLElement = (element) => element instanceof HTMLElement;\n\n/**\n * Returns an `HTMLElement` to be used as default value for *options.container*\n * for `Tooltip` / `Popover` components.\n *\n * When `getOffset` is *true*, it returns the `offsetParent` for tooltip/popover\n * offsets computation similar to **floating-ui**.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement | Element} element the target\n * @param {boolean=} getOffset when *true* it will return an `offsetParent`\n * @returns {HTMLElement | HTMLBodyElement | Window | globalThis} the query result\n */\nfunction getElementContainer(element, getOffset) {\n  const majorBlockTags = ['HTML', 'BODY'];\n\n  if (getOffset) {\n    /** @type {any} */\n    let { offsetParent } = element;\n    const win = getWindow(element);\n    // const { innerWidth } = getDocumentElement(element);\n\n    while (offsetParent && (isTableElement(offsetParent)\n      || (isHTMLElement(offsetParent)\n        // we must count for both fixed & sticky\n        && !['sticky', 'fixed'].includes(getElementStyle(offsetParent, 'position'))))) {\n      offsetParent = offsetParent.offsetParent;\n    }\n\n    if (!offsetParent || (offsetParent\n      && (majorBlockTags.includes(offsetParent.tagName)\n        || getElementStyle(offsetParent, 'position') === 'static'))) {\n      offsetParent = win;\n    }\n    return offsetParent;\n  }\n\n  /** @type {(HTMLElement)[]} */\n  const containers = [];\n  /** @type {any} */\n  let { parentNode } = element;\n\n  while (parentNode && !majorBlockTags.includes(parentNode.nodeName)) {\n    parentNode = getParentNode(parentNode);\n    if (!(isShadowRoot(parentNode) || !!parentNode.shadowRoot\n      || isTableElement(parentNode))) {\n      containers.push(parentNode);\n    }\n  }\n\n  return containers.find((c, i) => {\n    if (getElementStyle(c, 'position') !== 'relative'\n      && containers.slice(i + 1).every((r) => getElementStyle(r, 'position') === 'static')) {\n      return c;\n    }\n    return null;\n  }) || getDocumentBody(element);\n}\n\n/**\n * Global namespace for components `fixed-top` class.\n */\nconst fixedTopClass = 'fixed-top';\n\n/**\n * Global namespace for components `fixed-bottom` class.\n */\nconst fixedBottomClass = 'fixed-bottom';\n\n/**\n * Global namespace for components `sticky-top` class.\n */\nconst stickyTopClass = 'sticky-top';\n\n/**\n * Global namespace for components `position-sticky` class.\n */\nconst positionStickyClass = 'position-sticky';\n\n/** @param {(HTMLElement | Element | Document)=} parent */\nconst getFixedItems = (parent) => [\n  ...getElementsByClassName(fixedTopClass, parent),\n  ...getElementsByClassName(fixedBottomClass, parent),\n  ...getElementsByClassName(stickyTopClass, parent),\n  ...getElementsByClassName(positionStickyClass, parent),\n  ...getElementsByClassName('is-fixed', parent),\n];\n\n/**\n * Removes *padding* and *overflow* from the `<body>`\n * and all spacing from fixed items.\n * @param {(HTMLElement | Element)=} element the target modal/offcanvas\n */\nfunction resetScrollbar(element) {\n  const bd = getDocumentBody(element);\n  setElementStyle(bd, {\n    paddingRight: '',\n    overflow: '',\n  });\n\n  const fixedItems = getFixedItems(bd);\n\n  if (fixedItems.length) {\n    fixedItems.forEach((fixed) => {\n      setElementStyle(fixed, {\n        paddingRight: '',\n        marginRight: '',\n      });\n    });\n  }\n}\n\n/**\n * Returns the scrollbar width if the body does overflow\n * the window.\n * @param {(HTMLElement | Element)=} element\n * @returns {number} the value\n */\nfunction measureScrollbar(element) {\n  const { clientWidth } = getDocumentElement(element);\n  const { innerWidth } = getWindow(element);\n  return Math.abs(innerWidth - clientWidth);\n}\n\n/**\n * Sets the `<body>` and fixed items style when modal / offcanvas\n * is shown to the user.\n *\n * @param {HTMLElement | Element} element the target modal/offcanvas\n * @param {boolean=} overflow body does overflow or not\n */\nfunction setScrollbar(element, overflow) {\n  const bd = getDocumentBody(element);\n  const bodyPad = parseInt(getElementStyle(bd, 'paddingRight'), 10);\n  const isOpen = getElementStyle(bd, 'overflow') === 'hidden';\n  const sbWidth = isOpen && bodyPad ? 0 : measureScrollbar(element);\n  const fixedItems = getFixedItems(bd);\n\n  if (overflow) {\n    setElementStyle(bd, {\n      overflow: 'hidden',\n      paddingRight: `${bodyPad + sbWidth}px`,\n    });\n\n    if (fixedItems.length) {\n      fixedItems.forEach((fixed) => {\n        const itemPadValue = getElementStyle(fixed, 'paddingRight');\n        // @ts-ignore\n        fixed.style.paddingRight = `${parseInt(itemPadValue, 10) + sbWidth}px`;\n        if ([stickyTopClass, positionStickyClass].some((c) => hasClass(fixed, c))) {\n          const itemMValue = getElementStyle(fixed, 'marginRight');\n          // @ts-ignore\n          fixed.style.marginRight = `${parseInt(itemMValue, 10) - sbWidth}px`;\n        }\n      });\n    }\n  }\n}\n\n/**\n * This is a shortie for `document.createElement` method\n * which allows you to create a new `HTMLElement` for a given `tagName`\n * or based on an object with specific non-readonly attributes:\n * `id`, `className`, `textContent`, `style`, etc.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\n *\n * @param {Record<string, string> | string} param `tagName` or object\n * @return {HTMLElement | Element} a new `HTMLElement` or `Element`\n */\nfunction createElement(param) {\n  if (typeof param === 'string') {\n    return getDocument().createElement(param);\n  }\n\n  const { tagName } = param;\n  const attr = { ...param };\n  const newElement = createElement(tagName);\n  delete attr.tagName;\n  ObjectAssign(newElement, attr);\n  return newElement;\n}\n\n/** @type {string} */\nconst offcanvasString = 'offcanvas';\n\nconst backdropString = 'backdrop';\nconst modalBackdropClass = `${modalString}-${backdropString}`;\nconst offcanvasBackdropClass = `${offcanvasString}-${backdropString}`;\nconst modalActiveSelector = `.${modalString}.${showClass}`;\nconst offcanvasActiveSelector = `.${offcanvasString}.${showClass}`;\n\n// any document would suffice\nconst overlay = createElement('div');\n\n/**\n * Returns the current active modal / offcancas element.\n * @param {(HTMLElement | Element)=} element the context element\n * @returns {(HTMLElement | Element)?} the requested element\n */\nfunction getCurrentOpen(element) {\n  return querySelector(`${modalActiveSelector},${offcanvasActiveSelector}`, getDocument(element));\n}\n\n/**\n * Toogles from a Modal overlay to an Offcanvas, or vice-versa.\n * @param {boolean=} isModal\n */\nfunction toggleOverlayType(isModal) {\n  const targetClass = isModal ? modalBackdropClass : offcanvasBackdropClass;\n  [modalBackdropClass, offcanvasBackdropClass].forEach((c) => {\n    removeClass(overlay, c);\n  });\n  addClass(overlay, targetClass);\n}\n\n/**\n * Append the overlay to DOM.\n * @param {HTMLElement | Element} container\n * @param {boolean} hasFade\n * @param {boolean=} isModal\n */\nfunction appendOverlay(container, hasFade, isModal) {\n  toggleOverlayType(isModal);\n  container.append(overlay);\n  if (hasFade) addClass(overlay, fadeClass);\n}\n\n/**\n * Shows the overlay to the user.\n */\nfunction showOverlay() {\n  if (!hasClass(overlay, showClass)) {\n    addClass(overlay, showClass);\n    reflow(overlay);\n  }\n}\n\n/**\n * Hides the overlay from the user.\n */\nfunction hideOverlay() {\n  removeClass(overlay, showClass);\n}\n\n/**\n * Removes the overlay from DOM.\n * @param {(HTMLElement | Element)=} element\n */\nfunction removeOverlay(element) {\n  if (!getCurrentOpen(element)) {\n    removeClass(overlay, fadeClass);\n    overlay.remove();\n    resetScrollbar(element);\n  }\n}\n\n/**\n * @param {HTMLElement | Element} element target\n * @returns {boolean}\n */\nfunction isVisible(element) {\n  return element && getElementStyle(element, 'visibility') !== 'hidden'\n    // @ts-ignore\n    && element.offsetParent !== null;\n}\n\n/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true, // boolean|string\n  keyboard: true, // boolean\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Modal>}\n */\nconst getModalInstance = (element) => getInstance(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n * @type {BSN.InitCallback<Modal>}\n */\nconst modalInitCallback = (element) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = OriginalEvent(`show.bs.${modalString}`);\nconst shownModalEvent = OriginalEvent(`shown.bs.${modalString}`);\nconst hideModalEvent = OriginalEvent(`hide.bs.${modalString}`);\nconst hiddenModalEvent = OriginalEvent(`hidden.bs.${modalString}`);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param {Modal} self the `Modal` instance\n */\nfunction setModalScrollbar(self) {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } = element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = isRTL(element) ? 'paddingLeft' : 'paddingRight';\n    // @ts-ignore -- cannot use `setElementStyle`\n    element.style[pad] = `${scrollbarWidth}px`;\n  }\n  setScrollbar(element, (modalOverflow || clientHeight !== scrollHeight));\n}\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param {Modal} self the `Modal` instance\n * @param {boolean=} add when `true`, event listeners are added\n */\nfunction toggleModalDismiss(self, add) {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n  action(element, mouseclickEvent, modalDismissHandler);\n  // @ts-ignore\n  action(getWindow(element), resizeEvent, self.update, passiveHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler);\n}\n\n/**\n * Toggles on/off the `click` event listener of the `Modal` instance.\n * @param {Modal} self the `Modal` instance\n * @param {boolean=} add when `true`, event listener is added\n */\nfunction toggleModalHandler(self, add) {\n  const action = add ? addListener : removeListener;\n  const { triggers } = self;\n\n  if (triggers.length) {\n    triggers.forEach((btn) => action(btn, mouseclickEvent, modalClickHandler));\n  }\n}\n\n/**\n * Executes after a modal is hidden to the user.\n * @param {Modal} self the `Modal` instance\n */\nfunction afterModalHide(self) {\n  const { triggers, element, relatedTarget } = self;\n  removeOverlay(element);\n  setElementStyle(element, { paddingRight: '' });\n  toggleModalDismiss(self);\n\n  const focusElement = showModalEvent.relatedTarget || triggers.find(isVisible);\n  if (focusElement) focus(focusElement);\n\n  hiddenModalEvent.relatedTarget = relatedTarget;\n  dispatchEvent(element, hiddenModalEvent);\n}\n\n/**\n * Executes after a modal is shown to the user.\n * @param {Modal} self the `Modal` instance\n */\nfunction afterModalShow(self) {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget;\n  dispatchEvent(element, shownModalEvent);\n}\n\n/**\n * Executes before a modal is shown to the user.\n * @param {Modal} self the `Modal` instance\n */\nfunction beforeModalShow(self) {\n  const { element, hasFade } = self;\n  setElementStyle(element, { display: 'block' });\n\n  setModalScrollbar(self);\n  if (!getCurrentOpen(element)) {\n    setElementStyle(getDocumentBody(element), { overflow: 'hidden' });\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, 'true');\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n}\n\n/**\n * Executes before a modal is hidden to the user.\n * @param {Modal} self the `Modal` instance\n * @param {boolean=} force when `true` skip animation\n */\nfunction beforeModalHide(self, force) {\n  const {\n    element, options, hasFade,\n  } = self;\n\n  setElementStyle(element, { display: '' });\n\n  // force can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (options.backdrop && !force && hasFade && hasClass(overlay, showClass)\n    && !getCurrentOpen(element)) { // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self);\n  }\n}\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n * @param {MouseEvent} e the `Event` object\n * @this {HTMLElement | Element}\n */\nfunction modalClickHandler(e) {\n  const { target } = e;\n\n  const trigger = target && closest(this, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  if (!self) return;\n\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n  self.relatedTarget = trigger;\n  self.toggle();\n}\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param {KeyboardEvent} e the `Event` object\n */\nfunction modalKeyHandler({ code }) {\n  const element = querySelector(modalActiveSelector);\n  const self = element && getModalInstance(element);\n  if (!self) return;\n  const { options } = self;\n  if (options.keyboard && code === keyEscape // the keyboard option is enabled and the key is 27\n    && hasClass(element, showClass)) { // the modal is not visible\n    self.relatedTarget = null;\n    self.hide();\n  }\n}\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e the `Event` object\n */\nfunction modalDismissHandler(e) {\n  const element = this;\n  const self = getModalInstance(element);\n\n  // this timer is needed\n  if (!self || Timer.get(element)) return;\n\n  const { options, isStatic, modalDialog } = self;\n  const { backdrop } = options;\n  const { target } = e;\n\n  // @ts-ignore\n  const selectedText = getDocument(element).getSelection().toString().length;\n  // @ts-ignore\n  const targetInsideDialog = modalDialog.contains(target);\n  // @ts-ignore\n  const dismiss = target && closest(target, modalDismissSelector);\n\n  if (isStatic && !targetInsideDialog) {\n    Timer.set(element, () => {\n      addClass(element, modalStaticClass);\n      emulateTransitionEnd(modalDialog, () => staticTransitionEnd(self));\n    }, 17);\n  } else if (dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)) {\n    self.relatedTarget = dismiss || null;\n    self.hide();\n    e.preventDefault();\n  }\n}\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param {Modal} self the `Modal` instance\n */\nfunction staticTransitionEnd(self) {\n  const { element, modalDialog } = self;\n  const duration = getElementTransitionDuration(modalDialog) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n}\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nclass Modal extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target usually the `.modal` element\n   * @param {BSN.Options.Modal=} config instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n\n    // bind\n    const self = this;\n\n    // the modal\n    const { element } = self;\n\n    // the modal-dialog\n    /** @type {(HTMLElement | Element)} */\n    // @ts-ignore\n    self.modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    // modal can have multiple triggering elements\n    /** @type {(HTMLElement | Element)[]} */\n    self.triggers = [...querySelectorAll(modalToggleSelector)]\n      .filter((btn) => getTargetElement(btn) === element);\n\n    // additional internals\n    /** @type {boolean} */\n    self.isStatic = self.options.backdrop === 'static';\n    /** @type {boolean} */\n    self.hasFade = hasClass(element, fadeClass);\n    /** @type {(HTMLElement | Element)?} */\n    self.relatedTarget = null;\n    /** @type {HTMLBodyElement | HTMLElement | Element} */\n    // @ts-ignore\n    self.container = getElementContainer(element);\n\n    // attach event listeners\n    toggleModalHandler(self, true);\n\n    // bind\n    self.update = self.update.bind(self);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return modalComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */\n  get defaults() { return modalDefaults; }\n  /* eslint-enable */\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    const self = this;\n    if (hasClass(self.element, showClass)) self.hide();\n    else self.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const self = this;\n    const {\n      element, options, hasFade, relatedTarget, container,\n    } = self;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    if (hasClass(element, showClass)) return;\n\n    showModalEvent.relatedTarget = relatedTarget || null;\n    dispatchEvent(element, showModalEvent);\n    if (showModalEvent.defaultPrevented) return;\n\n    // we elegantly hide any opened modal/offcanvas\n    const currentOpen = getCurrentOpen(element);\n    if (currentOpen && currentOpen !== element) {\n      const this1 = getModalInstance(currentOpen);\n      const that1 = this1 || getInstance(currentOpen, 'Offcanvas');\n      that1.hide();\n    }\n\n    if (backdrop) {\n      if (!container.contains(overlay)) {\n        appendOverlay(container, hasFade, true);\n      } else {\n        toggleOverlayType(true);\n      }\n\n      overlayDelay = getElementTransitionDuration(overlay);\n\n      showOverlay();\n      setTimeout(() => beforeModalShow(self), overlayDelay);\n    } else {\n      beforeModalShow(self);\n      if (currentOpen && hasClass(overlay, showClass)) {\n        hideOverlay();\n      }\n    }\n  }\n\n  /**\n   * Hide the modal from the user.\n   * @param {boolean=} force when `true` it will skip animation\n   */\n  hide(force) {\n    const self = this;\n    const {\n      element, hasFade, relatedTarget,\n    } = self;\n\n    if (!hasClass(element, showClass)) return;\n\n    hideModalEvent.relatedTarget = relatedTarget || null;\n    dispatchEvent(element, hideModalEvent);\n    if (hideModalEvent.defaultPrevented) return;\n    removeClass(element, showClass);\n    setAttribute(element, ariaHidden, 'true');\n    removeAttribute(element, ariaModal);\n\n    if (hasFade && force !== false) {\n      emulateTransitionEnd(element, () => beforeModalHide(self));\n    } else {\n      beforeModalHide(self, force);\n    }\n  }\n\n  /** Updates the modal layout. */\n  update() {\n    const self = this;\n\n    if (hasClass(self.element, showClass)) setModalScrollbar(self);\n  }\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    const self = this;\n    self.hide(true); // forced call\n\n    toggleModalHandler(self);\n\n    super.dispose();\n  }\n}\n\nObjectAssign(Modal, {\n  selector: modalSelector,\n  init: modalInitCallback,\n  getInstance: getModalInstance,\n});\n\n/** @type {string} */\nconst offcanvasComponent = 'Offcanvas';\n\n/* Native JavaScript for Bootstrap 5 | OffCanvas\n------------------------------------------------ */\n\n// OFFCANVAS PRIVATE GC\n// ====================\nconst offcanvasSelector = `.${offcanvasString}`;\nconst offcanvasToggleSelector = `[${dataBsToggle}=\"${offcanvasString}\"]`;\nconst offcanvasDismissSelector = `[${dataBsDismiss}=\"${offcanvasString}\"]`;\nconst offcanvasTogglingClass = `${offcanvasString}-toggling`;\n\nconst offcanvasDefaults = {\n  backdrop: true, // boolean\n  keyboard: true, // boolean\n  scroll: false, // boolean\n};\n\n/**\n * Static method which returns an existing `Offcanvas` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Offcanvas>}\n */\nconst getOffcanvasInstance = (element) => getInstance(element, offcanvasComponent);\n\n/**\n * An `Offcanvas` initialization callback.\n * @type {BSN.InitCallback<Offcanvas>}\n */\nconst offcanvasInitCallback = (element) => new Offcanvas(element);\n\n// OFFCANVAS CUSTOM EVENTS\n// =======================\nconst showOffcanvasEvent = OriginalEvent(`show.bs.${offcanvasString}`);\nconst shownOffcanvasEvent = OriginalEvent(`shown.bs.${offcanvasString}`);\nconst hideOffcanvasEvent = OriginalEvent(`hide.bs.${offcanvasString}`);\nconst hiddenOffcanvasEvent = OriginalEvent(`hidden.bs.${offcanvasString}`);\n\n// OFFCANVAS PRIVATE METHODS\n// =========================\n/**\n * Sets additional style for the `<body>` and other elements\n * when showing an offcanvas to the user.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction setOffCanvasScrollbar(self) {\n  const { element } = self;\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  setScrollbar(element, clientHeight !== scrollHeight);\n}\n\n/**\n * Toggles on/off the `click` event listeners.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n * @param {boolean=} add when *true*, listeners are added\n */\nfunction toggleOffcanvasEvents(self, add) {\n  const action = add ? addListener : removeListener;\n  self.triggers.forEach((btn) => action(btn, mouseclickEvent, offcanvasTriggerHandler));\n}\n\n/**\n * Toggles on/off the listeners of the events that close the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n * @param {boolean=} add when *true* listeners are added\n */\nfunction toggleOffCanvasDismiss(self, add) {\n  const action = add ? addListener : removeListener;\n  const doc = getDocument(self.element);\n  action(doc, keydownEvent, offcanvasKeyDismissHandler);\n  action(doc, mouseclickEvent, offcanvasDismissHandler);\n}\n\n/**\n * Executes before showing the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction beforeOffcanvasShow(self) {\n  const { element, options } = self;\n\n  if (!options.scroll) {\n    setOffCanvasScrollbar(self);\n    setElementStyle(getDocumentBody(element), { overflow: 'hidden' });\n  }\n\n  addClass(element, offcanvasTogglingClass);\n  addClass(element, showClass);\n  setElementStyle(element, { visibility: 'visible' });\n\n  emulateTransitionEnd(element, () => showOffcanvasComplete(self));\n}\n\n/**\n * Executes before hiding the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction beforeOffcanvasHide(self) {\n  const { element, options } = self;\n  const currentOpen = getCurrentOpen(element);\n\n  // @ts-ignore\n  element.blur();\n\n  if (!currentOpen && options.backdrop && hasClass(overlay, showClass)) {\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => hideOffcanvasComplete(self));\n  } else hideOffcanvasComplete(self);\n}\n\n// OFFCANVAS EVENT HANDLERS\n// ========================\n/**\n * Handles the `click` event listeners.\n *\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e the `Event` object\n */\nfunction offcanvasTriggerHandler(e) {\n  const trigger = closest(this, offcanvasToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getOffcanvasInstance(element);\n\n  if (self) {\n    self.relatedTarget = trigger;\n    self.toggle();\n    if (trigger && trigger.tagName === 'A') {\n      e.preventDefault();\n    }\n  }\n}\n\n/**\n * Handles the event listeners that close the offcanvas.\n *\n * @this {Document}\n * @param {MouseEvent} e the `Event` object\n */\nfunction offcanvasDismissHandler(e) {\n  const element = querySelector(offcanvasActiveSelector, this);\n  if (!element) return;\n\n  const offCanvasDismiss = querySelector(offcanvasDismissSelector, element);\n  const self = getOffcanvasInstance(element);\n\n  if (!self) return;\n\n  const { options, triggers } = self;\n  const { target } = e;\n  // @ts-ignore -- `EventTarget` is `HTMLElement`\n  const trigger = closest(target, offcanvasToggleSelector);\n  const selection = getDocument(element).getSelection();\n\n  if (!(selection && selection.toString().length)\n    // @ts-ignore\n    && ((!element.contains(target) && options.backdrop\n    && (!trigger || (trigger && !triggers.includes(trigger))))\n    // @ts-ignore\n    || (offCanvasDismiss && offCanvasDismiss.contains(target)))) {\n    // @ts-ignore\n    self.relatedTarget = offCanvasDismiss && offCanvasDismiss.contains(target)\n      ? offCanvasDismiss : null;\n    self.hide();\n  }\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n}\n\n/**\n * Handles the `keydown` event listener for offcanvas\n * to hide it when user type the `ESC` key.\n *\n * @param {KeyboardEvent} e the `Event` object\n * @this {Document}\n */\nfunction offcanvasKeyDismissHandler({ code }) {\n  const element = querySelector(offcanvasActiveSelector, this);\n  if (!element) return;\n\n  const self = getOffcanvasInstance(element);\n\n  if (self && self.options.keyboard && code === keyEscape) {\n    self.relatedTarget = null;\n    self.hide();\n  }\n}\n\n/**\n * Handles the `transitionend` when showing the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction showOffcanvasComplete(self) {\n  const { element } = self;\n  removeClass(element, offcanvasTogglingClass);\n\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, 'true');\n  setAttribute(element, 'role', 'dialog');\n\n  dispatchEvent(element, shownOffcanvasEvent);\n\n  toggleOffCanvasDismiss(self, true);\n  focus(element);\n}\n\n/**\n * Handles the `transitionend` when hiding the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction hideOffcanvasComplete(self) {\n  const { element, triggers } = self;\n\n  setAttribute(element, ariaHidden, 'true');\n  removeAttribute(element, ariaModal);\n  removeAttribute(element, 'role');\n  setElementStyle(element, { visibility: '' });\n\n  const visibleTrigger = showOffcanvasEvent.relatedTarget || triggers.find((x) => isVisible(x));\n  if (visibleTrigger) focus(visibleTrigger);\n\n  removeOverlay(element);\n\n  dispatchEvent(element, hiddenOffcanvasEvent);\n  removeClass(element, offcanvasTogglingClass);\n\n  // must check for open instances\n  if (!getCurrentOpen(element)) {\n    toggleOffCanvasDismiss(self);\n  }\n}\n\n// OFFCANVAS DEFINITION\n// ====================\n/** Returns a new `Offcanvas` instance. */\nclass Offcanvas extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target usually an `.offcanvas` element\n   * @param {BSN.Options.Offcanvas=} config instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    const self = this;\n\n    // instance element\n    const { element } = self;\n\n    // all the triggering buttons\n    /** @type {(HTMLElement | Element)[]} */\n    self.triggers = [...querySelectorAll(offcanvasToggleSelector)]\n      .filter((btn) => getTargetElement(btn) === element);\n\n    // additional instance property\n    /** @type {HTMLBodyElement | HTMLElement | Element} */\n    // @ts-ignore\n    self.container = getElementContainer(element);\n    /** @type {(HTMLElement | Element)?} */\n    self.relatedTarget = null;\n\n    // attach event listeners\n    toggleOffcanvasEvents(self, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return offcanvasComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */\n  get defaults() { return offcanvasDefaults; }\n  /* eslint-enable */\n\n  // OFFCANVAS PUBLIC METHODS\n  // ========================\n  /** Shows or hides the offcanvas from the user. */\n  toggle() {\n    const self = this;\n    if (hasClass(self.element, showClass)) self.hide();\n    else self.show();\n  }\n\n  /** Shows the offcanvas to the user. */\n  show() {\n    const self = this;\n    const {\n      element, options, container, relatedTarget,\n    } = self;\n    let overlayDelay = 0;\n\n    if (hasClass(element, showClass)) return;\n\n    showOffcanvasEvent.relatedTarget = relatedTarget;\n    shownOffcanvasEvent.relatedTarget = relatedTarget;\n    dispatchEvent(element, showOffcanvasEvent);\n    if (showOffcanvasEvent.defaultPrevented) return;\n\n    // we elegantly hide any opened modal/offcanvas\n    const currentOpen = getCurrentOpen(element);\n    if (currentOpen && currentOpen !== element) {\n      const this1 = getOffcanvasInstance(currentOpen);\n      const that1 = this1 || getInstance(currentOpen, 'Modal');\n      that1.hide();\n    }\n\n    if (options.backdrop) {\n      if (!container.contains(overlay)) {\n        appendOverlay(container, true);\n      } else {\n        toggleOverlayType();\n      }\n\n      overlayDelay = getElementTransitionDuration(overlay);\n      showOverlay();\n\n      setTimeout(() => beforeOffcanvasShow(self), overlayDelay);\n    } else {\n      beforeOffcanvasShow(self);\n      if (currentOpen && hasClass(overlay, showClass)) {\n        hideOverlay();\n      }\n    }\n  }\n\n  /**\n   * Hides the offcanvas from the user.\n   * @param {boolean=} force when `true` it will skip animation\n   */\n  hide(force) {\n    const self = this;\n    const { element, relatedTarget } = self;\n\n    if (!hasClass(element, showClass)) return;\n\n    hideOffcanvasEvent.relatedTarget = relatedTarget;\n    hiddenOffcanvasEvent.relatedTarget = relatedTarget;\n    dispatchEvent(element, hideOffcanvasEvent);\n    if (hideOffcanvasEvent.defaultPrevented) return;\n\n    addClass(element, offcanvasTogglingClass);\n    removeClass(element, showClass);\n\n    if (!force) {\n      emulateTransitionEnd(element, () => beforeOffcanvasHide(self));\n    } else beforeOffcanvasHide(self);\n  }\n\n  /** Removes the `Offcanvas` from the target element. */\n  dispose() {\n    const self = this;\n    self.hide(true);\n    toggleOffcanvasEvents(self);\n    super.dispose();\n  }\n}\n\nObjectAssign(Offcanvas, {\n  selector: offcanvasSelector,\n  init: offcanvasInitCallback,\n  getInstance: getOffcanvasInstance,\n});\n\n/** @type {string} */\nconst popoverString = 'popover';\n\n/** @type {string} */\nconst popoverComponent = 'Popover';\n\n/** @type {string} */\nconst tooltipString = 'tooltip';\n\n/**\n * Returns a template for Popover / Tooltip.\n *\n * @param {string} tipType the expected markup type\n * @returns {string} the template markup\n */\nfunction getTipTemplate(tipType) {\n  const isTooltip = tipType === tooltipString;\n  const bodyClass = isTooltip ? `${tipType}-inner` : `${tipType}-body`;\n  const header = !isTooltip ? `<h3 class=\"${tipType}-header\"></h3>` : '';\n  const arrow = `<div class=\"${tipType}-arrow\"></div>`;\n  const body = `<div class=\"${bodyClass}\"></div>`;\n  return `<div class=\"${tipType}\" role=\"${tooltipString}\">${header + arrow + body}</div>`;\n}\n\n/**\n * Checks if an element is an `<svg>` (or any type of SVG element),\n * `<img>` or `<video>`.\n *\n * *Tooltip* / *Popover* works different with media elements.\n * @param {any} element the target element\n * @returns {boolean} the query result\n */\nconst isMedia = (element) => element\n  && [SVGElement, HTMLImageElement, HTMLVideoElement]\n    .some((mediaType) => element instanceof mediaType);\n\n/**\n * Returns an `{x,y}` object with the target\n * `HTMLElement` / `Node` scroll position.\n *\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement | Element | Window} element target node / element\n * @returns {{x: number, y: number}} the scroll tuple\n */\nfunction getNodeScroll(element) {\n  const isWin = 'scrollX' in element;\n  const x = isWin ? element.scrollX : element.scrollLeft;\n  const y = isWin ? element.scrollY : element.scrollTop;\n\n  return { x, y };\n}\n\n/**\n * Checks if a target `HTMLElement` is affected by scale.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement} element target\n * @returns {boolean} the query result\n */\nfunction isScaledElement(element) {\n  const { width, height } = getBoundingClientRect(element);\n  const { offsetWidth, offsetHeight } = element;\n  return Math.round(width) !== offsetWidth\n    || Math.round(height) !== offsetHeight;\n}\n\n/**\n * Returns the rect relative to an offset parent.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement | Element} element target\n * @param {HTMLElement | Element | Window} offsetParent the container / offset parent\n * @param {{x: number, y: number}} scroll\n * @returns {SHORTER.OffsetRect}\n */\nfunction getRectRelativeToOffsetParent(element, offsetParent, scroll) {\n  const isParentAnElement = offsetParent instanceof HTMLElement;\n  const rect = getBoundingClientRect(element, isParentAnElement && isScaledElement(offsetParent));\n  const offsets = { x: 0, y: 0 };\n\n  if (isParentAnElement) {\n    const offsetRect = getBoundingClientRect(offsetParent, true);\n    offsets.x = offsetRect.x + offsetParent.clientLeft;\n    offsets.y = offsetRect.y + offsetParent.clientTop;\n  }\n\n  return {\n    x: rect.left + scroll.x - offsets.x,\n    y: rect.top + scroll.y - offsets.y,\n    width: rect.width,\n    height: rect.height,\n  };\n}\n\n/** @type {Record<string, string>} */\nvar tipClassPositions = {\n  top: 'top',\n  bottom: 'bottom',\n  left: 'start',\n  right: 'end',\n};\n\n/**\n * Style popovers and tooltips.\n * @param {BSN.Tooltip | BSN.Popover} self the `Popover` / `Tooltip` instance\n * @param {PointerEvent=} e event object\n */\nfunction styleTip(self, e) {\n  const tipClasses = /\\b(top|bottom|start|end)+/;\n  const {\n    element, tooltip, options, arrow, offsetParent,\n  } = self;\n  const tipPositions = { ...tipClassPositions };\n\n  // reset tooltip style (top: 0, left: 0 works best)\n  setElementStyle(tooltip, { top: '0px', left: '0px', right: '' });\n  // @ts-ignore\n  const isPopover = self.name === popoverComponent;\n  const tipWidth = tooltip.offsetWidth;\n  const tipHeight = tooltip.offsetHeight;\n  const RTL = isRTL(element);\n  if (RTL) {\n    tipPositions.left = 'end';\n    tipPositions.right = 'start';\n  }\n  const documentElement = getDocumentElement(element);\n  const windowWidth = documentElement.clientWidth;\n  const windowHeight = documentElement.clientHeight;\n  const { container } = options;\n  let { placement } = options;\n  const {\n    left: parentLeft, right: parentRight, top: parentTop,\n  } = getBoundingClientRect(container, true);\n  const parentWidth = container.clientWidth;\n  const scrollbarWidth = Math.abs(parentWidth - container.offsetWidth);\n  const parentPosition = getElementStyle(container, 'position');\n  // const absoluteParent = parentPosition === 'absolute';\n  const fixedParent = parentPosition === 'fixed';\n  const staticParent = parentPosition === 'static';\n  const stickyParent = parentPosition === 'sticky';\n  const isSticky = stickyParent && parentTop === parseFloat(getElementStyle(container, 'top'));\n  // const absoluteTarget = getElementStyle(element, 'position') === 'absolute';\n  // const stickyFixedParent = ['sticky', 'fixed'].includes(parentPosition);\n  const leftBoundry = RTL && fixedParent ? scrollbarWidth : 0;\n  const rightBoundry = fixedParent ? parentWidth + parentLeft + (RTL ? scrollbarWidth : 0)\n    : parentWidth + parentLeft + (windowWidth - parentRight) - 1;\n  const {\n    width: elemWidth,\n    height: elemHeight,\n    left: elemRectLeft,\n    right: elemRectRight,\n    top: elemRectTop,\n  } = getBoundingClientRect(element, true);\n\n  const scroll = getNodeScroll(offsetParent);\n  const { x, y } = getRectRelativeToOffsetParent(element, offsetParent, scroll);\n  // reset arrow style\n  setElementStyle(arrow, { top: '', left: '', right: '' });\n  let topPosition;\n  let leftPosition;\n  let rightPosition;\n  let arrowTop;\n  let arrowLeft;\n  let arrowRight;\n\n  const arrowWidth = arrow.offsetWidth || 0;\n  const arrowHeight = arrow.offsetHeight || 0;\n  const arrowAdjust = arrowWidth / 2;\n\n  // check placement\n  let topExceed = elemRectTop - tipHeight - arrowHeight < 0;\n  let bottomExceed = elemRectTop + tipHeight + elemHeight\n    + arrowHeight >= windowHeight;\n  let leftExceed = elemRectLeft - tipWidth - arrowWidth < leftBoundry;\n  let rightExceed = elemRectLeft + tipWidth + elemWidth\n    + arrowWidth >= rightBoundry;\n\n  const horizontal = ['left', 'right'];\n  const vertical = ['top', 'bottom'];\n  topExceed = horizontal.includes(placement)\n    ? elemRectTop + elemHeight / 2 - tipHeight / 2 - arrowHeight < 0\n    : topExceed;\n  bottomExceed = horizontal.includes(placement)\n    ? elemRectTop + tipHeight / 2 + elemHeight / 2 + arrowHeight >= windowHeight\n    : bottomExceed;\n  leftExceed = vertical.includes(placement)\n    ? elemRectLeft + elemWidth / 2 - tipWidth / 2 < leftBoundry\n    : leftExceed;\n  rightExceed = vertical.includes(placement)\n    ? elemRectLeft + tipWidth / 2 + elemWidth / 2 >= rightBoundry\n    : rightExceed;\n\n  // recompute placement\n  // first, when both left and right limits are exceeded, we fall back to top|bottom\n  placement = (horizontal.includes(placement)) && leftExceed && rightExceed ? 'top' : placement;\n  placement = placement === 'top' && topExceed ? 'bottom' : placement;\n  placement = placement === 'bottom' && bottomExceed ? 'top' : placement;\n  placement = placement === 'left' && leftExceed ? 'right' : placement;\n  placement = placement === 'right' && rightExceed ? 'left' : placement;\n\n  // update tooltip/popover class\n  if (!tooltip.className.includes(placement)) {\n    tooltip.className = tooltip.className.replace(tipClasses, tipPositions[placement]);\n  }\n\n  // compute tooltip / popover coordinates\n  if (horizontal.includes(placement)) { // secondary|side positions\n    if (placement === 'left') { // LEFT\n      leftPosition = x - tipWidth - (isPopover ? arrowWidth : 0);\n    } else { // RIGHT\n      leftPosition = x + elemWidth + (isPopover ? arrowWidth : 0);\n    }\n\n    // adjust top and arrow\n    if (topExceed) {\n      topPosition = y;\n      topPosition += (isSticky ? -parentTop - scroll.y : 0);\n\n      arrowTop = elemHeight / 2 - arrowWidth;\n    } else if (bottomExceed) {\n      topPosition = y - tipHeight + elemHeight;\n      topPosition += (isSticky ? -parentTop - scroll.y : 0);\n\n      arrowTop = tipHeight - elemHeight / 2 - arrowWidth;\n    } else {\n      topPosition = y - tipHeight / 2 + elemHeight / 2;\n      topPosition += (isSticky ? -parentTop - scroll.y : 0);\n\n      arrowTop = tipHeight / 2 - arrowHeight / 2;\n    }\n  } else if (vertical.includes(placement)) {\n    if (e && isMedia(element)) {\n      let eX = 0;\n      let eY = 0;\n      if (staticParent) {\n        eX = e.pageX;\n        eY = e.pageY;\n      } else { // fixedParent | stickyParent\n        eX = e.clientX - parentLeft + (fixedParent ? scroll.x : 0);\n        eY = e.clientY - parentTop + (fixedParent ? scroll.y : 0);\n      }\n\n      // some weird RTL bug\n      eX -= RTL && fixedParent && scrollbarWidth ? scrollbarWidth : 0;\n\n      if (placement === 'top') {\n        topPosition = eY - tipHeight - arrowWidth;\n      } else {\n        topPosition = eY + arrowWidth;\n      }\n\n      // adjust (left | right) and also the arrow\n      if (e.clientX - tipWidth / 2 < leftBoundry) {\n        leftPosition = 0;\n        arrowLeft = eX - arrowAdjust;\n      } else if (e.clientX + tipWidth / 2 > rightBoundry) {\n        leftPosition = 'auto';\n        rightPosition = 0;\n        arrowRight = rightBoundry - eX - arrowAdjust;\n        arrowRight -= fixedParent ? parentLeft + (RTL ? scrollbarWidth : 0) : 0;\n\n      // normal top/bottom\n      } else {\n        leftPosition = eX - tipWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    } else {\n      if (placement === 'top') {\n        topPosition = y - tipHeight - (isPopover ? arrowHeight : 0);\n      } else { // BOTTOM\n        topPosition = y + elemHeight + (isPopover ? arrowHeight : 0);\n      }\n\n      // adjust left | right and also the arrow\n      if (leftExceed) {\n        leftPosition = 0;\n        arrowLeft = x + elemWidth / 2 - arrowAdjust;\n      } else if (rightExceed) {\n        leftPosition = 'auto';\n        rightPosition = 0;\n        arrowRight = elemWidth / 2 + rightBoundry - elemRectRight - arrowAdjust;\n      } else {\n        leftPosition = x - tipWidth / 2 + elemWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    }\n  }\n\n  // apply style to tooltip/popover\n  setElementStyle(tooltip, {\n    top: `${topPosition}px`,\n    left: leftPosition === 'auto' ? leftPosition : `${leftPosition}px`,\n    right: rightPosition !== undefined ? `${rightPosition}px` : '',\n  });\n\n  // update arrow placement\n  if (arrow instanceof HTMLElement) {\n    if (arrowTop !== undefined) {\n      arrow.style.top = `${arrowTop}px`;\n    }\n    if (arrowLeft !== undefined) {\n      arrow.style.left = `${arrowLeft}px`;\n    } else if (arrowRight !== undefined) {\n      arrow.style.right = `${arrowRight}px`;\n    }\n  }\n}\n\nconst tooltipDefaults = {\n  /** @type {string} */\n  template: getTipTemplate(tooltipString),\n  /** @type {string?} */\n  title: null, // string\n  /** @type {string?} */\n  customClass: null, // string | null\n  /** @type {string} */\n  trigger: 'hover focus',\n  /** @type {string?} */\n  placement: 'top', // string\n  /** @type {((c:string)=>string)?} */\n  sanitizeFn: null, // function\n  /** @type {boolean} */\n  animation: true, // bool\n  /** @type {number} */\n  delay: 200, // number\n  /** @type {(HTMLElement | Element)?} */\n  container: null,\n};\n\n/**\n * A global namespace for aria-describedby.\n * @type {string}\n */\nconst ariaDescribedBy = 'aria-describedby';\n\n/**\n * A global namespace for `mousedown` event.\n * @type {string}\n */\nconst mousedownEvent = 'mousedown';\n\n/**\n * A global namespace for `mousemove` event.\n * @type {string}\n */\nconst mousemoveEvent = 'mousemove';\n\n/**\n * A global namespace for `focusin` event.\n * @type {string}\n */\nconst focusinEvent = 'focusin';\n\n/**\n * A global namespace for `focusout` event.\n * @type {string}\n */\nconst focusoutEvent = 'focusout';\n\n/**\n * A global namespace for `hover` event.\n * @type {string}\n */\nconst mousehoverEvent = 'hover';\n\nlet elementUID = 0;\nlet elementMapUID = 0;\nconst elementIDMap = new Map();\n\n/**\n * Returns a unique identifier for popover, tooltip, scrollspy.\n *\n * @param {HTMLElement | Element} element target element\n * @param {string=} key predefined key\n * @returns {number} an existing or new unique ID\n */\nfunction getUID(element, key) {\n  let result = key ? elementUID : elementMapUID;\n\n  if (key) {\n    const elID = getUID(element);\n    const elMap = elementIDMap.get(elID) || new Map();\n    if (!elementIDMap.has(elID)) {\n      elementIDMap.set(elID, elMap);\n    }\n    if (!elMap.has(key)) {\n      elMap.set(key, result);\n      elementUID += 1;\n    } else result = elMap.get(key);\n  } else {\n    const elkey = element.id || element;\n\n    if (!elementIDMap.has(elkey)) {\n      elementIDMap.set(elkey, result);\n      elementMapUID += 1;\n    } else result = elementIDMap.get(elkey);\n  }\n  return result;\n}\n\n// @ts-ignore\nconst { userAgentData: uaDATA } = navigator;\n\n/**\n * A global namespace for `userAgentData` object.\n */\nconst userAgentData = uaDATA;\n\nconst { userAgent: userAgentString } = navigator;\n\n/**\n * A global namespace for `navigator.userAgent` string.\n */\nconst userAgent = userAgentString;\n\nconst appleBrands = /(iPhone|iPod|iPad)/;\n\n/**\n * A global `boolean` for Apple browsers.\n * @type {boolean}\n */\nconst isApple = !userAgentData ? appleBrands.test(userAgent)\n  : userAgentData.brands.some((/** @type {Record<string, any>} */x) => appleBrands.test(x.brand));\n\n/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = 'data-original-title';\n\n/** @type {string} */\nconst tooltipComponent = 'Tooltip';\n\n/**\n * Append an existing `Element` to Popover / Tooltip component or HTML\n * markup string to be parsed & sanitized to be used as popover / tooltip content.\n *\n * @param {HTMLElement | Element} element target\n * @param {HTMLElement | Element | string} content the `Element` to append / string\n * @param {ReturnType<any>} sanitizeFn a function to sanitize string content\n */\nfunction setHtml(element, content, sanitizeFn) {\n  if (typeof content === 'string' && !content.length) return;\n\n  if (typeof content === 'string') {\n    let dirty = content.trim(); // fixing #233\n    if (typeof sanitizeFn === 'function') dirty = sanitizeFn(dirty);\n\n    const domParser = new DOMParser();\n    const tempDocument = domParser.parseFromString(dirty, 'text/html');\n    const { body } = tempDocument;\n    const method = body.children.length ? 'innerHTML' : 'innerText';\n    // @ts-ignore\n    element[method] = body[method];\n  } else if (content instanceof HTMLElement) {\n    element.append(content);\n  }\n}\n\n/**\n * Creates a new tooltip / popover.\n *\n * @param {BSN.Popover | BSN.Tooltip} self the `Popover` instance\n */\nfunction createTip(self) {\n  const { id, element, options } = self;\n  const {\n    animation, customClass, sanitizeFn, placement, dismissible,\n  } = options;\n  let { title, content } = options;\n  const isTooltip = self.name === tooltipComponent;\n  const tipString = isTooltip ? tooltipString : popoverString;\n  const { template, btnClose } = options;\n  const tipPositions = { ...tipClassPositions };\n\n  if (isRTL(element)) {\n    tipPositions.left = 'end';\n    tipPositions.right = 'start';\n  }\n\n  // set initial popover class\n  const placementClass = `bs-${tipString}-${tipPositions[placement]}`;\n\n  // load template\n  /** @type {(HTMLElement | Element)?} */\n  let popoverTemplate;\n  if ([Element, HTMLElement].some((x) => template instanceof x)) {\n    popoverTemplate = template;\n  } else {\n    const htmlMarkup = getDocument(element).createElement('div');\n    setHtml(htmlMarkup, template, sanitizeFn);\n    popoverTemplate = htmlMarkup.firstElementChild;\n  }\n\n  // set popover markup\n  self.tooltip = popoverTemplate && popoverTemplate.cloneNode(true);\n\n  const { tooltip } = self;\n\n  // set id and role attributes\n  setAttribute(tooltip, 'id', id);\n  setAttribute(tooltip, 'role', tooltipString);\n\n  const bodyClass = isTooltip ? `${tooltipString}-inner` : `${popoverString}-body`;\n  const tooltipHeader = isTooltip ? null : querySelector(`.${popoverString}-header`, tooltip);\n  const tooltipBody = querySelector(`.${bodyClass}`, tooltip);\n\n  // set arrow and enable access for styleTip\n  self.arrow = querySelector(`.${tipString}-arrow`, tooltip);\n\n  // set dismissible button\n  if (dismissible) {\n    if (title) {\n      if (title instanceof HTMLElement) setHtml(title, btnClose, sanitizeFn);\n      else title += btnClose;\n    } else {\n      if (tooltipHeader) tooltipHeader.remove();\n      if (content instanceof HTMLElement) setHtml(content, btnClose, sanitizeFn);\n      else content += btnClose;\n    }\n  }\n\n  // fill the template with content from options / data attributes\n  // also sanitize title && content\n  if (!isTooltip) {\n    if (title && tooltipHeader) setHtml(tooltipHeader, title, sanitizeFn);\n    if (content && tooltipBody) setHtml(tooltipBody, content, sanitizeFn);\n    // @ts-ignore -- set btn\n    self.btn = querySelector('.btn-close', tooltip);\n  } else if (title && tooltipBody) setHtml(tooltipBody, title, sanitizeFn);\n\n  // set popover animation and placement\n  if (!hasClass(tooltip, tipString)) addClass(tooltip, tipString);\n  if (animation && !hasClass(tooltip, fadeClass)) addClass(tooltip, fadeClass);\n  if (customClass && !hasClass(tooltip, customClass)) {\n    addClass(tooltip, customClass);\n  }\n  if (!hasClass(tooltip, placementClass)) addClass(tooltip, placementClass);\n}\n\n/**\n * @param {(HTMLElement | Element)?} tip target\n * @param {HTMLElement | ParentNode} container parent container\n * @returns {boolean}\n */\nfunction isVisibleTip(tip, container) {\n  return tip instanceof HTMLElement && container.contains(tip);\n}\n\n/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector = `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = 'title';\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Tooltip>}\n */\nlet getTooltipInstance = (element) => getInstance(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n * @type {BSN.InitCallback<Tooltip>}\n */\nconst tooltipInitCallback = (element) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param {Tooltip} self the `Tooltip` instance\n */\nfunction removeTooltip(self) {\n  const { element, tooltip } = self;\n  removeAttribute(element, ariaDescribedBy);\n  tooltip.remove();\n}\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param {Tooltip} self the `Tooltip` instance\n */\nfunction disposeTooltipComplete(self) {\n  const { element } = self;\n  toggleTooltipHandlers(self);\n\n  if (element.hasAttribute(dataOriginalTitle) && self.name === tooltipString) {\n    toggleTooltipTitle(self);\n  }\n}\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param {Tooltip} self the `Tooltip` instance\n * @param {boolean=} add when `true`, event listeners are added\n */\nfunction toggleTooltipAction(self, add) {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n\n  action(getDocument(element), touchstartEvent, self.handleTouch, passiveHandler);\n\n  if (!isMedia(element)) {\n    [scrollEvent, resizeEvent].forEach((ev) => {\n      // @ts-ignore\n      action(getWindow(element), ev, self.update, passiveHandler);\n    });\n  }\n}\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param {Tooltip} self the `Tooltip` instance\n */\nfunction tooltipShownAction(self) {\n  const { element } = self;\n  const shownTooltipEvent = OriginalEvent(`shown.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, 'in');\n}\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param {Tooltip} self the `Tooltip` instance\n */\nfunction tooltipHiddenAction(self) {\n  const { element } = self;\n  const hiddenTooltipEvent = OriginalEvent(`hidden.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n  Timer.clear(element, 'out');\n}\n\n/**\n * Toggles on/off the `Tooltip` event listeners.\n *\n * @param {Tooltip} self the `Tooltip` instance\n * @param {boolean=} add when `true`, event listeners are added\n */\nfunction toggleTooltipHandlers(self, add) {\n  const action = add ? addListener : removeListener;\n  // @ts-ignore -- btn is only for dismissible popover\n  const { element, options, btn } = self;\n  const { trigger, dismissible } = options;\n\n  if (trigger.includes('manual')) return;\n\n  self.enabled = !!add;\n\n  /** @type {string[]} */\n  const triggerOptions = trigger.split(' ');\n  const elemIsMedia = isMedia(element);\n\n  if (elemIsMedia) {\n    action(element, mousemoveEvent, self.update, passiveHandler);\n  }\n\n  triggerOptions.forEach((tr) => {\n    if (elemIsMedia || tr === mousehoverEvent) {\n      action(element, mousedownEvent, self.show);\n      action(element, mouseenterEvent, self.show);\n\n      if (dismissible && btn) {\n        action(btn, mouseclickEvent, self.hide);\n      } else {\n        action(element, mouseleaveEvent, self.hide);\n        action(getDocument(element), touchstartEvent, self.handleTouch, passiveHandler);\n      }\n    } else if (tr === mouseclickEvent) {\n      action(element, tr, (!dismissible ? self.toggle : self.show));\n    } else if (tr === focusEvent) {\n      action(element, focusinEvent, self.show);\n      if (!dismissible) action(element, focusoutEvent, self.hide);\n      if (isApple) action(element, mouseclickEvent, () => focus(element));\n    }\n  });\n}\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param {Tooltip} self the `Tooltip` instance\n * @param {boolean=} add when `true`, event listeners are added\n */\nfunction toggleTooltipOpenHandlers(self, add) {\n  const action = add ? addListener : removeListener;\n  const { element, options, offsetParent } = self;\n  const { container } = options;\n  const { offsetHeight, scrollHeight } = container;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  if (!isMedia(element)) {\n    const win = getWindow(element);\n    const overflow = offsetHeight !== scrollHeight;\n    const scrollTarget = overflow || offsetParent !== win ? container : win;\n    // @ts-ignore\n    action(win, resizeEvent, self.update, passiveHandler);\n    action(scrollTarget, scrollEvent, self.update, passiveHandler);\n  }\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) action(parentModal, `hide.bs.${modalString}`, self.hide);\n  if (parentOffcanvas) action(parentOffcanvas, `hide.bs.${offcanvasString}`, self.hide);\n}\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param {Tooltip} self the `Tooltip` instance\n * @param {string=} content when `true`, event listeners are added\n */\nfunction toggleTooltipTitle(self, content) {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(element, titleAtt[content ? 0 : 1],\n    // @ts-ignore\n    (content || getAttribute(element, titleAtt[0])));\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n}\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nclass Tooltip extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target the target element\n   * @param {BSN.Options.Tooltip=} config the instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n\n    // bind\n    const self = this;\n    const { element } = self;\n    const isTooltip = self.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    getTooltipInstance = (elem) => getInstance(elem, tipComponent);\n\n    // additional properties\n    /** @type {any} */\n    self.tooltip = {};\n    if (!isTooltip) {\n      /** @type {any?} */\n      // @ts-ignore\n      self.btn = null;\n    }\n    /** @type {any} */\n    self.arrow = {};\n    /** @type {any} */\n    self.offsetParent = {};\n    /** @type {boolean} */\n    self.enabled = true;\n    /** @type {string} Set unique ID for `aria-describedby`. */\n    self.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = self;\n\n    // invalidate\n    if ((!options.title && isTooltip) || (!isTooltip && !options.content)) return;\n\n    const container = querySelector(options.container);\n    const idealContainer = getElementContainer(element);\n\n    // bypass container option when its position is static/relative\n    self.options.container = !container || (container\n      && ['static', 'relative'].includes(getElementStyle(container, 'position')))\n      ? idealContainer\n      : container || getDocumentBody(element);\n\n    // reset default options\n    tooltipDefaults[titleAttr] = null;\n\n    // all functions bind\n    self.handleTouch = self.handleTouch.bind(self);\n    self.update = self.update.bind(self);\n    self.show = self.show.bind(self);\n    self.hide = self.hide.bind(self);\n    self.toggle = self.toggle.bind(self);\n\n    // set title attributes and add event listeners\n    if (element.hasAttribute(titleAttr) && isTooltip) {\n      toggleTooltipTitle(self, options.title);\n    }\n\n    // create tooltip here\n    createTip(self);\n\n    // attach events\n    toggleTooltipHandlers(self, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return tooltipComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */\n  get defaults() { return tooltipDefaults; }\n  /* eslint-enable */\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /**\n   * Shows the tooltip.\n   *\n   * @param {Event=} e the `Event` object\n   * @this {Tooltip}\n   */\n  show(e) {\n    const self = this;\n    const {\n      options, tooltip, element, id,\n    } = self;\n    const { container, animation } = options;\n    const outTimer = Timer.get(element, 'out');\n\n    Timer.clear(element, 'out');\n\n    if (tooltip && !outTimer && !isVisibleTip(tooltip, container)) {\n      Timer.set(element, () => {\n        const showTooltipEvent = OriginalEvent(`show.bs.${toLowerCase(self.name)}`);\n        dispatchEvent(element, showTooltipEvent);\n        if (showTooltipEvent.defaultPrevented) return;\n\n        // append to container\n        container.append(tooltip);\n        setAttribute(element, ariaDescribedBy, `#${id}`);\n        // set offsetParent\n        self.offsetParent = getElementContainer(tooltip, true);\n\n        self.update(e);\n        toggleTooltipOpenHandlers(self, true);\n\n        if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n        if (animation) emulateTransitionEnd(tooltip, () => tooltipShownAction(self));\n        else tooltipShownAction(self);\n      }, 17, 'in');\n    }\n  }\n\n  /**\n   * Hides the tooltip.\n   *\n   * @this {Tooltip}\n   */\n  hide() {\n    const self = this;\n    const { options, tooltip, element } = self;\n    const { container, animation, delay } = options;\n\n    Timer.clear(element, 'in');\n\n    if (tooltip && isVisibleTip(tooltip, container)) {\n      Timer.set(element, () => {\n        const hideTooltipEvent = OriginalEvent(`hide.bs.${toLowerCase(self.name)}`);\n        dispatchEvent(element, hideTooltipEvent);\n\n        if (hideTooltipEvent.defaultPrevented) return;\n\n        // @ts-ignore\n        removeClass(tooltip, showClass);\n        toggleTooltipOpenHandlers(self);\n\n        if (animation) emulateTransitionEnd(tooltip, () => tooltipHiddenAction(self));\n        else tooltipHiddenAction(self);\n      }, delay + 17, 'out');\n    }\n  }\n\n  /**\n   * Updates the tooltip position.\n   *\n   * @param {Event=} e the `Event` object\n   * @this {Tooltip} the `Tooltip` instance\n   */\n  update(e) {\n    // @ts-ignore\n    styleTip(this, e);\n  }\n\n  /**\n   * Toggles the tooltip visibility.\n   *\n   * @param {Event=} e the `Event` object\n   * @this {Tooltip} the instance\n   */\n  toggle(e) {\n    const self = this;\n    const { tooltip, options } = self;\n\n    if (!isVisibleTip(tooltip, options.container)) self.show(e);\n    else self.hide();\n  }\n\n  /** Enables the tooltip. */\n  enable() {\n    const self = this;\n    const { enabled } = self;\n    if (!enabled) {\n      toggleTooltipHandlers(self, true);\n      self.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const self = this;\n    const {\n      element, tooltip, options, enabled,\n    } = self;\n    const { animation, container, delay } = options;\n    if (enabled) {\n      if (isVisibleTip(tooltip, container) && animation) {\n        self.hide();\n\n        Timer.set(element, () => {\n          toggleTooltipHandlers(self);\n          Timer.clear(element, tooltipString);\n        }, getElementTransitionDuration(tooltip) + delay + 17, tooltipString);\n      } else {\n        toggleTooltipHandlers(self);\n      }\n      self.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    const self = this;\n    if (!self.enabled) self.enable();\n    else self.disable();\n  }\n\n  /**\n   * Handles the `touchstart` event listener for `Tooltip`\n   * @this {Tooltip}\n   * @param {TouchEvent} e the `Event` object\n   */\n  handleTouch({ target }) {\n    const { tooltip, element } = this;\n\n    if (tooltip.contains(target) || target === element\n      // @ts-ignore\n      || (target && element.contains(target))) ; else {\n      this.hide();\n    }\n  }\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const self = this;\n    const { tooltip, options } = self;\n\n    if (options.animation && isVisibleTip(tooltip, options.container)) {\n      options.delay = 0; // reset delay\n      self.hide();\n      emulateTransitionEnd(tooltip, () => disposeTooltipComplete(self));\n    } else {\n      disposeTooltipComplete(self);\n    }\n    super.dispose();\n  }\n}\n\nObjectAssign(Tooltip, {\n  selector: tooltipSelector,\n  init: tooltipInitCallback,\n  getInstance: getTooltipInstance,\n  styleTip,\n});\n\n/* Native JavaScript for Bootstrap 5 | Popover\n---------------------------------------------- */\n\n// POPOVER PRIVATE GC\n// ==================\nconst popoverSelector = `[${dataBsToggle}=\"${popoverString}\"],[data-tip=\"${popoverString}\"]`;\n\nconst popoverDefaults = {\n  ...tooltipDefaults,\n  /** @type {string} */\n  template: getTipTemplate(popoverString),\n  /** @type {string} */\n  btnClose: '<button class=\"btn-close\" aria-label=\"Close\"></button>',\n  /** @type {boolean} */\n  dismissible: false,\n  /** @type {string?} */\n  content: null,\n};\n\n// POPOVER DEFINITION\n// ==================\n/** Returns a new `Popover` instance. */\nclass Popover extends Tooltip {\n  /* eslint-disable -- we want to specify Popover Options */\n  /**\n   * @param {HTMLElement | Element | string} target the target element\n   * @param {BSN.Options.Popover=} config the instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n  }\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */ \n  get name() { return popoverComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */\n  get defaults() { return popoverDefaults; }\n  /* eslint-enable */\n\n  /* extend original `show()` */\n  show() {\n    super.show();\n    // @ts-ignore -- btn only exists within dismissible popover\n    const { options, btn } = this;\n    if (options.dismissible && btn) setTimeout(() => focus(btn), 17);\n  }\n}\n\n/**\n * Static method which returns an existing `Popover` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Popover>}\n */\nconst getPopoverInstance = (element) => getInstance(element, popoverComponent);\n\n/**\n * A `Popover` initialization callback.\n * @type {BSN.InitCallback<Popover>}\n */\nconst popoverInitCallback = (element) => new Popover(element);\n\nObjectAssign(Popover, {\n  selector: popoverSelector,\n  init: popoverInitCallback,\n  getInstance: getPopoverInstance,\n  styleTip,\n});\n\n/**\n * Shortcut for `HTMLElement.getElementsByTagName` method. Some `Node` elements\n * like `ShadowRoot` do not support `getElementsByTagName`.\n *\n * @param {string} selector the tag name\n * @param {(HTMLElement | Element | Document)=} parent optional Element to look into\n * @return {HTMLCollectionOf<HTMLElement | Element>} the 'HTMLCollection'\n */\nfunction getElementsByTagName(selector, parent) {\n  const lookUp = parent && parentNodes\n    .some((x) => parent instanceof x) ? parent : getDocument();\n  return lookUp.getElementsByTagName(selector);\n}\n\n/** @type {string} */\nconst scrollspyString = 'scrollspy';\n\n/** @type {string} */\nconst scrollspyComponent = 'ScrollSpy';\n\n/* Native JavaScript for Bootstrap 5 | ScrollSpy\n------------------------------------------------ */\n\n// console.log(typeof addEventListener)\n\n// SCROLLSPY PRIVATE GC\n// ====================\nconst scrollspySelector = '[data-bs-spy=\"scroll\"]';\n\nconst scrollspyDefaults = {\n  offset: 10,\n  target: null,\n};\n\n/**\n * Static method which returns an existing `ScrollSpy` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<ScrollSpy>}\n */\nconst getScrollSpyInstance = (element) => getInstance(element, scrollspyComponent);\n\n/**\n * A `ScrollSpy` initialization callback.\n * @type {BSN.InitCallback<ScrollSpy>}\n */\nconst scrollspyInitCallback = (element) => new ScrollSpy(element);\n\n// SCROLLSPY CUSTOM EVENT\n// ======================\nconst activateScrollSpy = OriginalEvent(`activate.bs.${scrollspyString}`);\n\n// SCROLLSPY PRIVATE METHODS\n// =========================\n/**\n * Update the state of all items.\n * @param {ScrollSpy} self the `ScrollSpy` instance\n */\nfunction updateSpyTargets(self) {\n  const {\n    target, scrollTarget, options, itemsLength, scrollHeight, element,\n  } = self;\n  const { offset } = options;\n  const isWin = scrollTarget instanceof Window;\n\n  const links = target && getElementsByTagName('A', target);\n  const scrollHEIGHT = scrollTarget && getScrollHeight(scrollTarget);\n\n  // @ts-ignore\n  self.scrollTop = isWin ? scrollTarget.scrollY : scrollTarget.scrollTop;\n\n  // only update items/offsets once or with each mutation\n  if (links && (itemsLength !== links.length || scrollHEIGHT !== scrollHeight)) {\n    let href;\n    let targetItem;\n    let rect;\n\n    // reset arrays & update\n    self.items = [];\n    self.offsets = [];\n    self.scrollHeight = scrollHEIGHT;\n    self.maxScroll = self.scrollHeight - getOffsetHeight(self);\n\n    [...links].forEach((link) => {\n      href = getAttribute(link, 'href');\n      targetItem = href && href.charAt(0) === '#' && href.slice(-1) !== '#'\n        && querySelector(href, getDocument(element));\n\n      if (targetItem) {\n        self.items.push(link);\n        rect = getBoundingClientRect(targetItem);\n        // @ts-ignore\n        self.offsets.push((isWin ? rect.top + self.scrollTop : targetItem.offsetTop) - offset);\n      }\n    });\n    self.itemsLength = self.items.length;\n  }\n}\n\n/**\n * Returns the `scrollHeight` property of the scrolling element.\n * @param {HTMLElement | Element | Window | globalThis} scrollTarget the `ScrollSpy` instance\n * @return {number} `scrollTarget` height\n */\nfunction getScrollHeight(scrollTarget) {\n  return scrollTarget instanceof HTMLElement\n    ? scrollTarget.scrollHeight // @ts-ignore\n    : getDocumentElement(scrollTarget).scrollHeight;\n}\n\n/**\n * Returns the height property of the scrolling element.\n * @param {ScrollSpy} params the `ScrollSpy` instance\n * @returns {number}\n */\nfunction getOffsetHeight({ element, scrollTarget }) {\n  return (scrollTarget instanceof Window)\n    ? scrollTarget.innerHeight\n    : getBoundingClientRect(element).height;\n}\n\n/**\n * Clear all items of the target.\n * @param {HTMLElement | Element} target a single item\n */\nfunction clear(target) {\n  [...getElementsByTagName('A', target)].forEach((item) => {\n    if (hasClass(item, activeClass)) removeClass(item, activeClass);\n  });\n}\n\n/**\n * Activates a new item.\n * @param {ScrollSpy} self the `ScrollSpy` instance\n * @param {HTMLElement | Element} item a single item\n */\nfunction activate(self, item) {\n  const { target, element } = self;\n  // @ts-ignore\n  clear(target);\n  // @ts-ignore\n  self.activeItem = item;\n  addClass(item, activeClass);\n\n  // activate all parents\n  const parents = [];\n  let parentItem = item;\n  while (parentItem !== getDocumentBody(element)) {\n    // @ts-ignore\n    parentItem = parentItem.parentElement;\n    if (hasClass(parentItem, 'nav') || hasClass(parentItem, 'dropdown-menu')) parents.push(parentItem);\n  }\n\n  parents.forEach((menuItem) => {\n    /** @type {(HTMLElement | Element)?} */\n    const parentLink = menuItem.previousElementSibling;\n\n    if (parentLink && !hasClass(parentLink, activeClass)) {\n      addClass(parentLink, activeClass);\n    }\n  });\n\n  // dispatch\n  activateScrollSpy.relatedTarget = item;\n  dispatchEvent(element, activateScrollSpy);\n}\n\n/**\n * Toggles on/off the component event listener.\n * @param {ScrollSpy} self the `ScrollSpy` instance\n * @param {boolean=} add when `true`, listener is added\n */\nfunction toggleSpyHandlers(self, add) {\n  const action = add ? addListener : removeListener;\n  // @ts-ignore\n  action(self.scrollTarget, scrollEvent, self.refresh, passiveHandler);\n}\n\n// SCROLLSPY DEFINITION\n// ====================\n/** Returns a new `ScrollSpy` instance. */\nclass ScrollSpy extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target the target element\n   * @param {BSN.Options.ScrollSpy=} config the instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n\n    // initialization element & options\n    const { element, options } = self;\n\n    // additional properties\n    /** @type {(HTMLElement | Element)?} */\n    self.target = querySelector(options.target, getDocument(element));\n\n    // invalidate\n    if (!self.target) return;\n\n    const win = getWindow(element);\n\n    // set initial state\n    /** @type {HTMLElement | Element | Window | globalThis} */\n    self.scrollTarget = element.clientHeight < element.scrollHeight ? element : win;\n    /** @type {number} */\n    self.scrollTop = 0;\n    /** @type {number} */\n    self.maxScroll = 0;\n    /** @type {number} */\n    self.scrollHeight = 0;\n    /** @type {(HTMLElement | Element)?} */\n    self.activeItem = null;\n    /** @type {(HTMLElement | Element)[]} */\n    self.items = [];\n    /** @type {number} */\n    self.itemsLength = 0;\n    /** @type {number[]} */\n    self.offsets = [];\n\n    // bind events\n    self.refresh = self.refresh.bind(self);\n\n    // add event handlers\n    toggleSpyHandlers(self, true);\n\n    self.refresh();\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return scrollspyComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */\n  get defaults() { return scrollspyDefaults; }\n  /* eslint-enable */\n\n  // SCROLLSPY PUBLIC METHODS\n  // ========================\n  /** Updates all items. */\n  refresh() {\n    const self = this;\n    const { target } = self;\n\n    // check if target is visible and invalidate\n    // @ts-ignore\n    if (target.offsetHeight === 0) return;\n\n    updateSpyTargets(self);\n\n    const {\n      scrollTop, maxScroll, itemsLength, items, activeItem,\n    } = self;\n\n    if (scrollTop >= maxScroll) {\n      const newActiveItem = items[itemsLength - 1];\n\n      if (activeItem !== newActiveItem) {\n        activate(self, newActiveItem);\n      }\n      return;\n    }\n\n    const { offsets } = self;\n\n    if (activeItem && scrollTop < offsets[0] && offsets[0] > 0) {\n      self.activeItem = null;\n      // @ts-ignore\n      clear(target);\n      return;\n    }\n\n    items.forEach((item, i) => {\n      if (activeItem !== item && scrollTop >= offsets[i]\n        && (typeof offsets[i + 1] === 'undefined' || scrollTop < offsets[i + 1])) {\n        activate(self, item);\n      }\n    });\n  }\n\n  /** Removes `ScrollSpy` from the target element. */\n  dispose() {\n    toggleSpyHandlers(this);\n    super.dispose();\n  }\n}\n\nObjectAssign(ScrollSpy, {\n  selector: scrollspySelector,\n  init: scrollspyInitCallback,\n  getInstance: getScrollSpyInstance,\n});\n\n/**\n * A global namespace for aria-selected.\n * @type {string}\n */\nconst ariaSelected = 'aria-selected';\n\n/** @type {string} */\nconst tabString = 'tab';\n\n/** @type {string} */\nconst tabComponent = 'Tab';\n\n/* Native JavaScript for Bootstrap 5 | Tab\n------------------------------------------ */\n\n// TAB PRIVATE GC\n// ================\nconst tabSelector = `[${dataBsToggle}=\"${tabString}\"]`;\n\n/**\n * Static method which returns an existing `Tab` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Tab>}\n */\nconst getTabInstance = (element) => getInstance(element, tabComponent);\n\n/**\n * A `Tab` initialization callback.\n * @type {BSN.InitCallback<Tab>}\n */\nconst tabInitCallback = (element) => new Tab(element);\n\n// TAB CUSTOM EVENTS\n// =================\nconst showTabEvent = OriginalEvent(`show.bs.${tabString}`);\nconst shownTabEvent = OriginalEvent(`shown.bs.${tabString}`);\nconst hideTabEvent = OriginalEvent(`hide.bs.${tabString}`);\nconst hiddenTabEvent = OriginalEvent(`hidden.bs.${tabString}`);\n\n/**\n * Stores the current active tab and its content\n * for a given `.nav` element.\n * @type {Map<(HTMLElement | Element), any>}\n */\nconst tabPrivate = new Map();\n\n// TAB PRIVATE METHODS\n// ===================\n/**\n * Executes after tab transition has finished.\n * @param {Tab} self the `Tab` instance\n */\nfunction triggerTabEnd(self) {\n  const { tabContent, nav } = self;\n\n  if (tabContent && hasClass(tabContent, collapsingClass)) {\n    // @ts-ignore\n    tabContent.style.height = '';\n    removeClass(tabContent, collapsingClass);\n  }\n\n  if (nav) Timer.clear(nav);\n}\n\n/**\n * Executes before showing the tab content.\n * @param {Tab} self the `Tab` instance\n */\nfunction triggerTabShow(self) {\n  const {\n    element, tabContent, content: nextContent, nav,\n  } = self;\n  const { tab } = nav && tabPrivate.get(nav);\n\n  if (tabContent && hasClass(nextContent, fadeClass)) { // height animation\n    const { currentHeight, nextHeight } = tabPrivate.get(element);\n    if (currentHeight === nextHeight) {\n      triggerTabEnd(self);\n    } else {\n      setTimeout(() => { // enables height animation\n        // @ts-ignore\n        tabContent.style.height = `${nextHeight}px`; // height animation\n        reflow(tabContent);\n        emulateTransitionEnd(tabContent, () => triggerTabEnd(self));\n      }, 50);\n    }\n  } else if (nav) Timer.clear(nav);\n\n  shownTabEvent.relatedTarget = tab;\n  dispatchEvent(element, shownTabEvent);\n}\n\n/**\n * Executes before hiding the tab.\n * @param {Tab} self the `Tab` instance\n */\nfunction triggerTabHide(self) {\n  const {\n    element, content: nextContent, tabContent, nav,\n  } = self;\n  const { tab, content } = nav && tabPrivate.get(nav);\n  let currentHeight = 0;\n\n  if (tabContent && hasClass(nextContent, fadeClass)) {\n    [content, nextContent].forEach((c) => {\n      addClass(c, 'overflow-hidden');\n    });\n    currentHeight = content.scrollHeight || 0;\n  }\n\n  // update relatedTarget and dispatch event\n  showTabEvent.relatedTarget = tab;\n  hiddenTabEvent.relatedTarget = element;\n  dispatchEvent(element, showTabEvent);\n  if (showTabEvent.defaultPrevented) return;\n\n  addClass(nextContent, activeClass);\n  removeClass(content, activeClass);\n\n  if (tabContent && hasClass(nextContent, fadeClass)) {\n    const nextHeight = nextContent.scrollHeight;\n    tabPrivate.set(element, { currentHeight, nextHeight });\n\n    addClass(tabContent, collapsingClass);\n    // @ts-ignore -- height animation\n    tabContent.style.height = `${currentHeight}px`;\n    reflow(tabContent);\n    [content, nextContent].forEach((c) => {\n      removeClass(c, 'overflow-hidden');\n    });\n  }\n\n  if (nextContent && hasClass(nextContent, fadeClass)) {\n    setTimeout(() => {\n      addClass(nextContent, showClass);\n      emulateTransitionEnd(nextContent, () => {\n        triggerTabShow(self);\n      });\n    }, 1);\n  } else {\n    addClass(nextContent, showClass);\n    triggerTabShow(self);\n  }\n\n  dispatchEvent(tab, hiddenTabEvent);\n}\n\n/**\n * Returns the current active tab and its target content.\n * @param {Tab} self the `Tab` instance\n * @returns {Record<string, any>} the query result\n */\nfunction getActiveTab(self) {\n  const { nav } = self;\n\n  // @ts-ignore\n  const activeTabs = getElementsByClassName(activeClass, nav);\n  /** @type {(HTMLElement | Element)=} */\n  let tab;\n  if (activeTabs.length === 1\n    // @ts-ignore\n    && !dropdownMenuClasses.some((c) => hasClass(activeTabs[0].parentElement, c))) {\n    [tab] = activeTabs;\n  } else if (activeTabs.length > 1) {\n    tab = activeTabs[activeTabs.length - 1];\n  }\n  const content = tab ? getTargetElement(tab) : null;\n  // @ts-ignore\n  return { tab, content };\n}\n\n/**\n * Returns a parent dropdown.\n * @param {HTMLElement | Element} element the `Tab` element\n * @returns {(HTMLElement | Element)?} the parent dropdown\n */\nfunction getParentDropdown(element) {\n  const dropdown = closest(element, `.${dropdownMenuClasses.join(',.')}`);\n  return dropdown ? querySelector(`.${dropdownMenuClasses[0]}-toggle`, dropdown) : null;\n}\n\n/**\n * Toggles on/off the `click` event listener.\n * @param {Tab} self the `Tab` instance\n * @param {boolean=} add when `true`, event listener is added\n */\nfunction toggleTabHandler(self, add) {\n  const action = add ? addListener : removeListener;\n  action(self.element, mouseclickEvent, tabClickHandler);\n}\n\n// TAB EVENT HANDLER\n// =================\n/**\n * Handles the `click` event listener.\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e the `Event` object\n */\nfunction tabClickHandler(e) {\n  const self = getTabInstance(this);\n  if (!self) return;\n  e.preventDefault();\n\n  self.show();\n}\n\n// TAB DEFINITION\n// ==============\n/** Creates a new `Tab` instance. */\nclass Tab extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target the target element\n   */\n  constructor(target) {\n    super(target);\n    // bind\n    const self = this;\n\n    // initialization element\n    const { element } = self;\n    const content = getTargetElement(element);\n\n    // no point initializing a tab without a corresponding content\n    if (!content) return;\n\n    const nav = closest(element, '.nav');\n    const container = closest(content, '.tab-content');\n\n    /** @type {(HTMLElement | Element)?} */\n    self.nav = nav;\n    /** @type {HTMLElement | Element} */\n    self.content = content;\n    /** @type {(HTMLElement | Element)?} */\n    self.tabContent = container;\n\n    // event targets\n    /** @type {(HTMLElement | Element)?} */\n    self.dropdown = getParentDropdown(element);\n\n    // show first Tab instance of none is shown\n    // suggested on #432\n    const { tab } = getActiveTab(self);\n    if (nav && !tab) {\n      const firstTab = querySelector(tabSelector, nav);\n      const firstTabContent = firstTab && getTargetElement(firstTab);\n\n      if (firstTabContent) {\n        addClass(firstTab, activeClass);\n        addClass(firstTabContent, showClass);\n        addClass(firstTabContent, activeClass);\n        setAttribute(element, ariaSelected, 'true');\n      }\n    }\n\n    // add event listener\n    toggleTabHandler(self, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */  \n  get name() { return tabComponent; }\n  /* eslint-enable */\n\n  // TAB PUBLIC METHODS\n  // ==================\n  /** Shows the tab to the user. */\n  show() {\n    const self = this;\n    const { element, nav, dropdown } = self;\n\n    if (!(nav && Timer.get(nav)) && !hasClass(element, activeClass)) {\n      const { tab, content } = getActiveTab(self);\n\n      if (nav) tabPrivate.set(nav, { tab, content });\n\n      // update relatedTarget and dispatch\n      hideTabEvent.relatedTarget = element;\n\n      dispatchEvent(tab, hideTabEvent);\n      if (hideTabEvent.defaultPrevented) return;\n\n      addClass(element, activeClass);\n      setAttribute(element, ariaSelected, 'true');\n\n      const activeDropdown = getParentDropdown(tab);\n      if (activeDropdown && hasClass(activeDropdown, activeClass)) {\n        removeClass(activeDropdown, activeClass);\n      }\n\n      if (nav) {\n        Timer.set(nav, () => {\n          removeClass(tab, activeClass);\n          setAttribute(tab, ariaSelected, 'false');\n          if (dropdown && !hasClass(dropdown, activeClass)) addClass(dropdown, activeClass);\n        }, 1);\n      }\n\n      if (hasClass(content, fadeClass)) {\n        removeClass(content, showClass);\n        emulateTransitionEnd(content, () => triggerTabHide(self));\n      } else {\n        triggerTabHide(self);\n      }\n    }\n  }\n\n  /** Removes the `Tab` component from the target element. */\n  dispose() {\n    toggleTabHandler(this);\n    super.dispose();\n  }\n}\n\nObjectAssign(Tab, {\n  selector: tabSelector,\n  init: tabInitCallback,\n  getInstance: getTabInstance,\n});\n\n/** @type {string} */\nconst toastString = 'toast';\n\n/** @type {string} */\nconst toastComponent = 'Toast';\n\n/* Native JavaScript for Bootstrap 5 | Toast\n-------------------------------------------- */\n\n// TOAST PRIVATE GC\n// ================\nconst toastSelector = `.${toastString}`;\nconst toastDismissSelector = `[${dataBsDismiss}=\"${toastString}\"]`;\nconst showingClass = 'showing';\n/** @deprecated */\nconst hideClass = 'hide';\n\nconst toastDefaults = {\n  animation: true,\n  autohide: true,\n  delay: 5000,\n};\n\n/**\n * Static method which returns an existing `Toast` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Toast>}\n */\nconst getToastInstance = (element) => getInstance(element, toastComponent);\n\n/**\n * A `Toast` initialization callback.\n * @type {BSN.InitCallback<Toast>}\n */\nconst toastInitCallback = (element) => new Toast(element);\n\n// TOAST CUSTOM EVENTS\n// ===================\nconst showToastEvent = OriginalEvent(`show.bs.${toastString}`);\nconst shownToastEvent = OriginalEvent(`shown.bs.${toastString}`);\nconst hideToastEvent = OriginalEvent(`hide.bs.${toastString}`);\nconst hiddenToastEvent = OriginalEvent(`hidden.bs.${toastString}`);\n\n// TOAST PRIVATE METHODS\n// =====================\n/**\n * Executes after the toast is shown to the user.\n * @param {Toast} self the `Toast` instance\n */\nfunction showToastComplete(self) {\n  const { element, options } = self;\n  removeClass(element, showingClass);\n  Timer.clear(element, showingClass);\n\n  dispatchEvent(element, shownToastEvent);\n  if (options.autohide) {\n    Timer.set(element, () => self.hide(), options.delay, toastString);\n  }\n}\n\n/**\n * Executes after the toast is hidden to the user.\n * @param {Toast} self the `Toast` instance\n */\nfunction hideToastComplete(self) {\n  const { element } = self;\n  removeClass(element, showingClass);\n  removeClass(element, showClass);\n  addClass(element, hideClass); // B/C\n  Timer.clear(element, toastString);\n  dispatchEvent(element, hiddenToastEvent);\n}\n\n/**\n * Executes before hiding the toast.\n * @param {Toast} self the `Toast` instance\n */\nfunction hideToast(self) {\n  const { element, options } = self;\n  addClass(element, showingClass);\n\n  if (options.animation) {\n    reflow(element);\n    emulateTransitionEnd(element, () => hideToastComplete(self));\n  } else {\n    hideToastComplete(self);\n  }\n}\n\n/**\n * Executes before showing the toast.\n * @param {Toast} self the `Toast` instance\n */\nfunction showToast(self) {\n  const { element, options } = self;\n  Timer.set(element, () => {\n    removeClass(element, hideClass); // B/C\n    reflow(element);\n    addClass(element, showClass);\n    addClass(element, showingClass);\n\n    if (options.animation) {\n      emulateTransitionEnd(element, () => showToastComplete(self));\n    } else {\n      showToastComplete(self);\n    }\n  }, 17, showingClass);\n}\n\n/**\n * Toggles on/off the `click` event listener.\n * @param {Toast} self the `Toast` instance\n * @param {boolean=} add when `true`, it will add the listener\n */\nfunction toggleToastHandlers(self, add) {\n  const action = add ? addListener : removeListener;\n  const { element, dismiss, options } = self;\n  if (dismiss) {\n    action(dismiss, mouseclickEvent, self.hide);\n  }\n  if (options.autohide) {\n    [focusinEvent, focusoutEvent, mouseenterEvent, mouseleaveEvent]\n      .forEach((e) => action(element, e, interactiveToastHandler));\n  }\n}\n\n// TOAST EVENT HANDLERS\n// ====================\n/**\n * Executes after the instance has been disposed.\n * @param {Toast} self the `Toast` instance\n */\nfunction completeDisposeToast(self) {\n  Timer.clear(self.element, toastString);\n  toggleToastHandlers(self);\n}\n\n/**\n * Executes when user interacts with the toast without closing it,\n * usually by hovering or focusing it.\n *\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e the `Toast` instance\n */\nfunction interactiveToastHandler(e) {\n  const element = this;\n  const self = getToastInstance(element);\n  const { type, relatedTarget } = e;\n  // @ts-ignore\n  if (!self || (element === relatedTarget || element.contains(relatedTarget))) return;\n\n  if ([mouseenterEvent, focusinEvent].includes(type)) {\n    Timer.clear(element, toastString);\n  } else {\n    Timer.set(element, () => self.hide(), self.options.delay, toastString);\n  }\n}\n\n// TOAST DEFINITION\n// ================\n/** Creates a new `Toast` instance. */\nclass Toast extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target the target `.toast` element\n   * @param {BSN.Options.Toast=} config the instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n    const { element, options } = self;\n\n    // set fadeClass, the options.animation will override the markup\n    if (options.animation && !hasClass(element, fadeClass)) addClass(element, fadeClass);\n    else if (!options.animation && hasClass(element, fadeClass)) removeClass(element, fadeClass);\n    // dismiss button\n    /** @type {(HTMLElement | Element)?} */\n    self.dismiss = querySelector(toastDismissSelector, element);\n\n    // bind\n    self.show = self.show.bind(self);\n    self.hide = self.hide.bind(self);\n\n    // add event listener\n    toggleToastHandlers(self, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */  \n  get name() { return toastComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */  \n  get defaults() { return toastDefaults; }\n  /* eslint-enable */\n\n  // TOAST PUBLIC METHODS\n  // ====================\n  /** Shows the toast. */\n  show() {\n    const self = this;\n    const { element } = self;\n    if (element && !hasClass(element, showClass)) {\n      dispatchEvent(element, showToastEvent);\n      if (showToastEvent.defaultPrevented) return;\n\n      showToast(self);\n    }\n  }\n\n  /** Hides the toast. */\n  hide() {\n    const self = this;\n    const { element } = self;\n\n    if (element && hasClass(element, showClass)) {\n      dispatchEvent(element, hideToastEvent);\n      if (hideToastEvent.defaultPrevented) return;\n      hideToast(self);\n    }\n  }\n\n  /** Removes the `Toast` component from the target element. */\n  dispose() {\n    const self = this;\n    const { element } = self;\n\n    if (hasClass(element, showClass)) {\n      removeClass(element, showClass);\n    }\n\n    completeDisposeToast(self);\n\n    super.dispose();\n  }\n}\n\nObjectAssign(Toast, {\n  selector: toastSelector,\n  init: toastInitCallback,\n  getInstance: getToastInstance,\n});\n\n/**\n * Check if element matches a CSS selector.\n *\n * @param {HTMLElement | Element} target\n * @param {string} selector\n * @returns {boolean}\n */\nfunction matches(target, selector) {\n  return target.matches(selector);\n}\n\n/** @type {Record<string, any>} */\nconst componentsList = {\n  Alert,\n  Button,\n  Carousel,\n  Collapse,\n  Dropdown,\n  Modal,\n  Offcanvas,\n  Popover,\n  ScrollSpy,\n  Tab,\n  Toast,\n  Tooltip,\n};\n\n/**\n * Initialize all matched `Element`s for one component.\n * @param {BSN.InitCallback<any>} callback\n * @param {NodeListOf<HTMLElement | Element> | (HTMLElement | Element)[]} collection\n */\nfunction initComponentDataAPI(callback, collection) {\n  [...collection].forEach((x) => callback(x));\n}\n\n/**\n * Remove one component from a target container element or all in the page.\n * @param {string} component the component name\n * @param {(Element | HTMLElement | Document)=} context parent `Element`\n */\nfunction removeComponentDataAPI(component, context) {\n  const compData = Data.getAllFor(component);\n\n  if (compData) {\n    [...compData].forEach((x) => {\n      const [element, instance] = x;\n      if (context && context.contains(element)) instance.dispose();\n    });\n  }\n}\n\n/**\n * Initialize all BSN components for a target container.\n * @param {(Element | HTMLElement | Document)=} context parent `Element`\n */\nfunction initCallback(context) {\n  const lookUp = context && parentNodes.some((x) => context instanceof x)\n    ? context : undefined;\n  const elemCollection = [...getElementsByTagName('*', lookUp)];\n\n  ObjectKeys(componentsList).forEach((comp) => {\n    const { init, selector } = componentsList[comp];\n    initComponentDataAPI(init, elemCollection.filter((item) => matches(item, selector)));\n  });\n}\n\n/**\n * Remove all BSN components for a target container.\n * @param {(Element | HTMLElement | Document)=} context parent `Element`\n */\nfunction removeDataAPI(context) {\n  const lookUp = context && parentNodes.some((x) => context instanceof x)\n    ? context : undefined;\n\n  ObjectKeys(componentsList).forEach((comp) => {\n    removeComponentDataAPI(comp, lookUp);\n  });\n}\n\n// bulk initialize all components\nif (document.body) initCallback();\nelse {\n  addListener(document, 'DOMContentLoaded', () => initCallback(), { once: true });\n}\n\nconst BSN = {\n  Alert,\n  Button,\n  Carousel,\n  Collapse,\n  Dropdown,\n  Modal,\n  Offcanvas,\n  Popover,\n  ScrollSpy,\n  Tab,\n  Toast,\n  Tooltip,\n\n  initCallback,\n  removeDataAPI,\n  Version,\n  EventListener,\n};\n\nexport { BSN as default };\n","import '../../sass/main.scss';\nimport BSN from 'bootstrap.native';\n\nconst refs = {\n  modal: document.querySelector('#subscription-modal'),\n  subscribeBtn: document.querySelector('button[data-subscribe]'),\n};\n\nconst PROMPT_DELAY = 1000;\nconst MAX_PROMPT_ATTEMPTS = 3;\nlet promptCounter = 0;\nlet hasSubscribed = false;\n\nconst modal = new BSN.Modal('#subscription-modal');\n\nrefs.modal.addEventListener('hide.bs.modal', openModal);\nrefs.subscribeBtn.addEventListener('click', onSubscribeBtnClick);\n\nopenModal();\n\nfunction openModal() {\n  if (promptCounter === MAX_PROMPT_ATTEMPTS || hasSubscribed) {\n    return;\n  }\n\n  setTimeout(() => {\n    modal.show();\n    promptCounter += 1;\n  }, PROMPT_DELAY);\n}\n\nfunction onSubscribeBtnClick() {\n  hasSubscribed = true;\n  modal.hide();\n}\n"]}