{"version":3,"sources":["js/module_11/racetrack.js"],"names":["horses","raceCounter","refs","startBtn","document","querySelector","winner","progress","resultTable","getRandomTime","min","max","Math","floor","random","onStart","promises","map","run","console","log","updateWinnerField","updateProgressField","determineWinner","waitForAll","horse","Promise","resolve","time","setTimeout","message","textContent","horsesP","race","then","updateResultTable","all","tr","insertAdjacentHTML","addEventListener"],"mappings":";;;AA8DC,aA9DD,QAAA,wBAEA,IAAIA,EAAS,CAAC,cAAe,UAAW,kBAAmB,aAAc,cAErEC,EAAc,EAElB,MAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,kBACjCC,OAAQF,SAASC,cAAc,cAC/BE,SAAUH,SAASC,cAAc,gBACjCG,YAAaJ,SAASC,cAAc,6BAEtC,SAASI,EAAcC,EAAKC,GACnBC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAKtD,SAASK,IACPd,GAAe,EACTe,MAAAA,EAAWhB,EAAOiB,IAAIC,GAC5BC,QAAQC,IAAIJ,GACZK,EAAkB,IAClBC,EAAoB,8CACpBC,EAAgBP,GAChBQ,EAAWR,GAGb,SAASE,EAAIO,GACJ,OAAA,IAAIC,QAAQC,IACXC,MAAAA,EAAOnB,EAAc,IAAM,MAEjCoB,WAAW,KACTF,EAAQ,CAAEF,MAAAA,EAAOG,KAAAA,KAChBA,KAIP,SAASN,EAAoBQ,GAC3B5B,EAAKK,SAASwB,YAAcD,EAG9B,SAAST,EAAkBS,GACzB5B,EAAKI,OAAOyB,YAAcD,EAG5B,SAASP,EAAgBS,GACvBN,QAAQO,KAAKD,GAASE,KAAK,EAAGT,MAAAA,EAAOG,KAAAA,MACnC1B,EAAKI,OAAOyB,0BAA4BN,qBAAyBG,YACjEO,EAAkB,CAAEV,MAAAA,EAAOG,KAAAA,EAAM3B,YAAAA,MAIrC,SAASuB,EAAWQ,GAClBN,QAAQU,IAAIJ,GAASE,KAAK,KACxBhC,EAAKK,SAASwB,YAAc,wCAIhC,SAASI,GAAkB,MAAEV,EAAF,KAASG,IAC5BS,MAAAA,aAAgBpC,aAAuBwB,aAAiBG,cAC9D1B,EAAKM,YAAY8B,mBAAmB,YAAaD,GA7CnDnC,EAAKC,SAASoC,iBAAiB,QAASxB","file":"racetrack.6a2bc1b9.js","sourceRoot":"../src","sourcesContent":["import '../../sass/main.scss';\n\nlet horses = ['Secretariat', 'Eclipse', 'West Australian', 'Flying Fox', 'Seabiscuit'];\n\nlet raceCounter = 0;\n\nconst refs = {\n  startBtn: document.querySelector('.js-start-race'),\n  winner: document.querySelector('.js-winner'),\n  progress: document.querySelector('.js-progress'),\n  resultTable: document.querySelector('.js-result-table > tbody'),\n};\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() {\n  raceCounter += 1;\n  const promises = horses.map(run);\n  console.log(promises);\n  updateWinnerField('');\n  updateProgressField('üö¥‚Äç‚ôÇÔ∏è –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è');\n  determineWinner(promises);\n  waitForAll(promises);\n}\n\nfunction run(horse) {\n  return new Promise(resolve => {\n    const time = getRandomTime(2000, 3500);\n\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\nfunction updateProgressField(message) {\n  refs.progress.textContent = message;\n}\n\nfunction updateWinnerField(message) {\n  refs.winner.textContent = message;\n}\n\nfunction determineWinner(horsesP) {\n  Promise.race(horsesP).then(({ horse, time }) => {\n    refs.winner.textContent = `üí™ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª –∑–∞ ${time} –≤—Ä–µ–º–µ–Ω–∏`;\n    updateResultTable({ horse, time, raceCounter });\n  });\n}\n\nfunction waitForAll(horsesP) {\n  Promise.all(horsesP).then(() => {\n    refs.progress.textContent = '‚ùå –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏';\n  });\n}\n\nfunction updateResultTable({ horse, time }) {\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n  refs.resultTable.insertAdjacentHTML('beforeend', tr);\n}\n"]}